function msg = generate_MAPS_error_message(funcName,errCode,errArgs)
% This function contains all documented MAPS error messages.
% It is a configuration file which relates exceptions encountered in all
% MAPS functions (which have specific codes attached to them) to error
% messages written in plain English.
%
% INPUTS:
%   -> funcName: string name of the function where the error was found
%   -> errCode: string code for the error that was encountered
%   -> errArgs: cell array of additional message arguments (can be empty)
%
% OUTPUTS:
%   -> msg: string error message
%
% DETAILS:
%   -> This file contains a sub-function with the above naming convention
%      for each documented MAPS function.
%   -> All of the sub-functions take an errCode and a (potentially empty)
%      cell array of additional message arguments as input.
%   -> Each of the sub-functions relates a particular error (identified by
%      a specific code that is unique in that MAPS function) to an error
%      message.
%   -> The construction of that error message can be supplemented with
%      additional information contained in errArgs (which can be an
%      empty cell array if no additional arguments exist for the error).
%
% NOTES:
%   -> See the MAPS user guide for a description of error handling in MAPS.
%
% This version: 19/12/2013
% Author(s): Francesca Monti, Konstantinos Theodoridis, Matt Waldron, Kate
% Reinold

%% CHECK INPUTS
if nargin < 3
    error(['MAPS:',mfilename,':BadNargin'],[mfilename,' was not ',...
        'passed the right number of inputs: it requires 3 inputs, ',...
        'but only received ',num2str(nargin)])
elseif ~ischar(funcName)
    error(['MAPS:',mfilename,':BadInput1'],['1st input passed to ',...
        mfilename,' must be a string representing a MAPS function name'])
elseif ~ischar(errCode)
    error(['MAPS:',mfilename,':BadInput2'],['2nd input passed to ',...
        mfilename,' must be a string representing a MAPS error code'])
elseif ~iscell(errArgs)
    error(['MAPS:',mfilename,':BadInput3'],['3rd input passed to ',...
        mfilename,' must be a cell array containing additional ',...
        'message arguments'])
end

%% ATTEMPT CALL THE RELEVANT SUBFUNCTION
try
    msg = eval(['get_',funcName,'_error(errCode,errArgs);']);
catch MessageConstructionE
    ErrorMessageE = MException(...
        ['MAPS:',mfilename,':MessageConstructionFailure'],...
        ['MAPS ',mfilename,' configuration file was unable ',...
        'to construct the exception message for ''',funcName,''' ',...
        'for the following reason:']);
    ErrorMessageE = addCause(ErrorMessageE,MessageConstructionE);
    throw(ErrorMessageE);
end

end

%% ADD CAUSE FROM LIST TO AN EXCEPTION
function msg = get_add_causes_from_list_to_an_exception_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['add_causes_from_list_to_an_exception was not passed ',...
            'the right number of inputs: it requires 4 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'add_causes_from_list_to_an_exception must be an ',...
            'exception to add the causes to'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'add_causes_from_list_to_an_exception must be a string ',...
            'representing the name of the exception identifier for ',...
            'the causes'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'add_causes_from_list_to_an_exception must be a two-',...
            'dimensional cell string array of possible exception ',...
            'cause arguments'];
    case 'BadInput4'
        msg = ['4th input passed to ',...
            'add_causes_from_list_to_an_exception must be a column ',...
            'vector of logicals describing which arguments from the ',...
            'list to add as causes'];        
    case 'InconsistentCauseDims'
        msg = ['4th & 5th inputs passed to ',...
            'add_causes_from_list_to_an_exception must have the same ',...
            'nummber of rows, reflecting number of possible causes'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end



%% APPEND STRINGS
function msg = get_append_strings_error(errCode,errArgs)                    %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['append_strings was not passed the right number of ',...
            'inputs: it requires 2 input, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to append_strings must be a two-',...
            'dimensional cell array of strings to append'];
    case 'BadInput2'
        msg = ['2nd input passed to append_strings must be a string ',...
            'to append to the set of strings passed in as 1st input'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% APPEND STRINGS AND CREATE COMMA SEPARATED LIST
function msg = get_append_strings_and_create_comma_separated_list_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['append_strings_and_create_comma_separated_list was not ',...
            'passed the right number of inputs: it requires 2 inputs, ',...
            'but received ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end


%% ARE DATA THE SAME
function msg = get_are_data_the_same_error(errCode,errArgs)                 %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['are_data_the_same was not passed the right number of ',...
            'inputs: it requires 2 or 3 inputs, but only received ',...
            errArgs{1}];
    case 'BadInput3'
        msg = ['Optional 3rd input passed to are_data_the_same must ',...
            'be a numeric scalar representing a tolerance for the ',...
            'comparison of the two pieces of data within which the ',...
            'two data are treated as being numerically identical'];
    case 'UnhandledClass'
        msg = ['MAPS could not complete the assessment of whether or ',...
            'not the two data are the same because it encountered the ',...
            'following data class that its data comparison function ',...
            'does not handle: ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% ARE EQUATIONS FORWARD LOOKING
function msg = get_are_equations_forward_looking_error(errCode,errArgs)     %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['are_equations_forward_looking was not passed the ',...
            'right number of inputs: it requires 1 input, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to are_equations_forward_looking ',...
            'must be a column cell string array of equation strings'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% ARE EQUATIONS THE SAME
function msg = get_are_equations_the_same_error(errCode,errArgs)            %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['are_equations_the_same was not passed the right ',...
            'number of inputs: it requires 2 or 3 inputs, but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to are_equations_the_same must be an ',...
            'equation string (either explicit or implicitly equal 0)'];
    case 'BadInput2'
        msg = ['2nd input passed to are_equations_the_same must be an ',...
            'equation string (either explicit or implicitly equal 0)'];
    case 'BadInput3'
        msg = ['Optional 3rd input passed to are_equations_the_same ',...
            'must be a numeric scalar representing a tolerance for ',...
            'the numerical comparison of the two equations'];
    case 'InevaluableEquations'
        msg = ['MAPS could not numerically evaluate one or both of ',...
            'the equation strings input. That implies that one (or ',...
            'both) of the equations is (are) invalid in MAPS or that ',...
            'the 2nd equation input contains terms additional to the ',...
            '1st equation input.  On attempted numerical evaluation, ',...
            'MATLAB returned the following error:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% ARE ROWS IN STRING ARRAY UNIQUE
function msg = get_are_rows_in_string_array_unique_error(errCode,errArgs)   %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['are_rows_in_string_array_unique was not passed the ',...
            'right number of inputs: it requires 1 input, but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to are_rows_in_string_array_unique ',...
            'must be a two-dimensional cell string array'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% BLOCK ORDER SYSTEM OF EQUATIONS
function msg = get_block_order_system_of_equations_error(errCode,errArgs)   %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['block_order_system_of_equations was not passed the ',...
            'right number of inputs: it requires 2 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to block_order_system_of_equations ',...
            'must be a column cell string array of equations'];
    case 'BadInput2'
        msg = ['2nd input passed to block_order_system_of_equations ',...
            'must be a column cell string array of endogenous ',...
            'variables (representing an output assignment set)'];
    case 'EqVarNumberMismatch'
        msg = ['The algorithm to block order the system of equations ',...
            'requires that the number of variables and number of ',...
            'equations be equal so that the system is exactly identified'];
    case 'BadAssignVarIncEntries'
        msg = ['The algorithm to block order the system of equations ',...
            'requires that the endogenous variables represent an ',...
            'output assignment set such that the incidence matrix ',...
            'contains a diagonal of non-zero entries'];
    case 'NonRecursiveEqSystem'
        msg = ['The system of equations is not recursive. The ',...
            'following equations constitute one or more non-recursive ',...
            'blocks:'];
    case 'NonRecursiveEqSystem:Instance'
        msg = errArgs{1};
    otherwise
        throw_missing_error_code_error(errCode);
end
end


%% BUILD NEW DATA
function msg = get_build_new_data_error(errCode,errArgs)                    %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['Number of inputs received by build_new_data ',...
            'is not right: we expected 5 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by build_new_data is not as ',...
            'expected: it must be a matrix containing finite numerics'];
    case 'BadInput2'
        msg = ['2nd input received by build_new_data is not as ',...
            'expected: it must be a matrix containing finite numerics'];
    case 'BadInput3'
        msg = ['3rd input received by build_new_data is not as ',...
            'expected: it must be a matrix containing finite numerics'];
    case 'BadInput4'
        msg = ['4th input received by build_new_data is not as ',...
            'expected: it must be a structure with fields '...
            '''anticipated'' and ''unanticipated'''];
    case 'BadShockFields'
        msg = ['The structure ''Shocks'' must contain fields called '...
            '''anticipated'' and/or ''unanticipated'''];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% BUILD TWO COLUMN CELL ARRAY OF STRING PAIRS
function msg = get_build_two_column_cell_array_of_string_pairs_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['build_two_column_cell_array_of_string_pairs was not ',...
            'passed the right number of inputs: it requires at least ',...
            '2 inputs but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'build_two_column_cell_array_of_string_pairs must be a ',...
            'column cell string array'];    
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'build_two_column_cell_array_of_string_pairs must be a ',...
            'column cell string array']; 
    case 'BadInput3'
        msg = ['Optional 3rd input passed to ',...
            'build_two_column_cell_array_of_string_pairs must be a ',...
            'logical scalar dictating whether or not the output cell ',...
            'of string pairs should be alphabetically sorted or not'];
    case 'BadInput4'
        msg = ['Optional 4th input passed to ',...
            'build_two_column_cell_array_of_string_pairs must be a ',...
            'logical scalar dictating whether or not the output cell ',...
            'of string pairs should be alphabetically sorted by the ',...
            'second of first column (assuming that the alphabetical ',...
            'sort optional input has been set to true)'];         
    otherwise
        throw_missing_error_code_error(errCode);
end
end


%% CELL ARRAY VLOOKUP
function msg = get_cell_array_vlookup_error(errCode,errArgs)                %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['cell_array_vlookup was not passed the right number of ',...
            'inputs: it requires ate least 3 inputs, but receieved ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to cell_array_vlookup must be a row ',...
            'cell string array of strings to lookup'];
    case 'BadInput2'
        msg = ['2nd input passed to cell_array_vlookup must be a two-',...
            'dimensional cell string array of strings to match on a ',...
            'row-wise basis'];
    case 'BadInput3'
        msg = ['3rd varargin input passed to cell_array_vlookup must ',...
            'be a cell array of column cell arrays'];
    case 'Input1InconsistentInput2'
        msg = ['The number of columns in the cell array of strings to ',...
            'find (1st input) must equal the number of columns in the ',...
            'cell array of strings to match (2nd input)'];
    case 'DimsMatchCellInconsistentLookupCell'
        msg = ['The number of rows in each of the vectors in which to ',...
            'lookup data must equal the number of rows in the cell ',...
            'array of strings to match'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CHECK EQUATION IS VALID
function msg = get_check_equation_is_valid_error(errCode,errArgs)           %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['check_equation_is_valid was not passed thr right ',...
            'number of inputs: it requires 1 input but only received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by check_equation_is_valid must be ',...
            'a string representing an equation'];
    case 'BadInput2'
        msg = ['Optional 2nd input received by ',...
            'check_equation_is_valid must be a boolean scalar ',...
            'describing whether the equation string input is explicit ',...
            '(true) or implicit (false)'];
    case 'BadInput3'
        msg = ['Optional 3rd input received by ',...
            'check_equation_is_valid must be an exception'];
    case 'InvalidEquation'
        msg = ['The input equation is not a valid equation for the ',...
            'following reason(s):'];
    case 'WrongNumberOfEqualSignsExplicit'
        msg = ['The equation should contain one and only one ',...
            '''='' symbol, but it contains ',errArgs{1},' equal symbols'];
    case 'WrongNumberOfEqualSignsImplicit'
        msg = ['The equation is specified as being implicit (i.e. ',...
            'an expression) so should not contain an ''='' symbol, ',...
            'but it contains ',errArgs{1},' equal symbols'];
    case 'UnexpectedTerm'
        invalidSymbolStr = create_comma_separated_list(errArgs);
        msg = ['The following terms in the equation are not valid in ',...
            'MATLAB: ''',invalidSymbolStr,''''];
    case 'InevaluableEquation'
        msg = ['The equation is not a valid, executable MATLAB ',...
            'expression. MATLAB returned the following error on ',...
            'attempted evaluation of the equation:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end


%% CHECK FIELD NAMES IN STRUCTURE
function msg = get_check_field_names_in_structure_error(errCode,errArgs)    %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['check_field_names_in_structure was not passed the ',...
            'right number of inputs: it requires 3 or 4 inputs but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by check_field_names_in_structure ',...
            'must be a structure whose fields are to be checked'];        
    case 'BadInput2'
        msg = ['2nd input received by check_field_names_in_structure ',...
            'must be a string description for the structure being ',...
            'checked (to provide some context for the error handling)']; 
    case 'BadInput3'
        msg = ['3rd input received by check_field_names_in_structure ',...
            'must be a string, column or row cell string array of ',...
            'field names that must exist within the structure'];
    case 'BadInput4'
        msg = ['Optional 4th input received by ',...
            'check_field_names_in_structure ',...
            'must be a string, column or row cell string array of ',...
            'field names that may optionally exist within the structure'];
    case 'NoFieldsToCheck'
        msg = ['MAPS cannot check the structure field names because ',...
            'there were no optional field names passed in and the ',...
            'compulsory fields input was empty, suggesting that the ',...
            'input structure should have no fields. If that is the ',...
            'case, then you can check the structure''s validity using ',...
            'an isempty test on the field names of the structure. If ',...
            'not, please check and amend the inputs in the call to ',...
            'this function.'];
    case 'InvalidInputFieldNames'
        msg = ['The set of compulsory and/or optional field names ',...
            'passed into this function to check against the field ',...
            'names of the input structure are invalid because they ',...
            'do not constitute a unique set. The following were ',...
            'repeated at least once:']; 
    case 'InvalidInputFieldNames:Instance'
        msg = errArgs{1};        
    case 'MissingCompulsoryFields'
        msg = [errArgs{1},' is missing the following compulsory fields:'];
    case 'MissingCompulsoryFields:Instance'
        msg = errArgs{1};
    case 'UnknownFields'
        msg = [errArgs{1},' contains the following unexpected fields:'];
    case 'UnknownFields:Instance'
        msg = errArgs{1};        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CHECK FILE EXISTS
function msg = get_check_file_exists_error(errCode,errArgs)                 %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['check_file_exists was not passed the right number of ',...
            'inputs: it requires 1 or 2 inputs but received ',errArgs{1}];
    case 'NonExistentFile'
        msg = ['The file name ''',errArgs{1},''' does not exist on ',...
            'the search path - please check the name of the file and ',...
            'the open MATLAB paths'];      
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CHECK FILE NAME IS VALID
function msg = get_check_file_name_is_valid_error(errCode,errArgs)          %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['check_file_name_is_valid was not passed the right ',...
            'number of inputs: it requires 1 or 2 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by check_file_name_is_valid must ',...
            'be a string representing the name of the file to check'];
    case 'BadInput2'
        msg = ['2nd optional input received by ',...
            'check_file_name_is_valid must be a string representing ',...
            'the expected extension of the file to find'];
    case 'BadlySpecifiedExpectedExtension'
        msg = ['The expected file extension input ''',errArgs{1},''' ',...
            'is badly specified: any valid file extension must be an ',...
            'uninterrupted sequence of alphabetic charaters or a ',...
            '''.'' delimiter followed by an uninterrupted sequence of ',...
            'alphabetic charaters'];   
    case 'BadDirectory'
        msg = ['The directory part of the file name (inferred as all ',...
            'characters up to and including the final ''\'' delimiter ',...
            'that could be found in the input file name string - in ',...
            'this case ''',errArgs{1},''') is not a valid directory ',...
            'as determined by the MATLAB ''isdir'' command']; 
    case 'BadFileName'
        msg = ['The file name extracted from the full path file name ',...
            '(inferred as all characters following the final ''\'' ',...
            'delimiter and preceding the final ''.'' delimiter - in ',...
            'this case ''',errArgs{1},''') is not a valid file name ',...
            'because it contained 1 or more of the following illegal ',...
            'characters: ',create_comma_separated_list(errArgs{2})];
    case 'BadFileExtension'
        msg = ['The extension part of the file name (inferred as all ',...
            'characters including and following the final ''.'' ',...
            'delimiter that could be found in the input file name ',...
            'string - in this case ''',errArgs{1},''') is is invalid: ',...
            'any valid file extension must be a ''.'' delimiter ',...
            'followed by an uninterrupted sequence of alphabetic ',...
            'charaters'];         
    case 'FileExtensionMismatch'
        msg = ['The extension part of the file name (inferred as all ',...
            'characters including and following the final ''.'' ',...
            'delimiter that could be found in the input file name ',...
            'string - in this case ''',errArgs{1},''') did not match ',...
            'the expected file extension input of ''',errArgs{2},''''];        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CHECK FOR VAR UNIQUENESS ACROSS MODEL FILE EQUATIONS
function msg = ...
    get_check_for_var_uniqueness_across_model_file_equations_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['check_for_var_uniqueness_across_model_file_equations ',...
            'was not passed the right number of inputs: it requires 4 ',...
            'inputs, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by ',...
            'check_for_var_uniqueness_across_model_file_equations ',...
            'must be an exception to add file syntax causes to'];
    case 'BadInput2'
        msg = ['2nd input received by ',...
            'check_for_var_uniqueness_across_model_file_equations ',...
            'must be a structure containing the parsed contents of ',...
            'the model file'];
    case 'BadInput3'
        msg = ['3rd input received by ',...
            'check_for_var_uniqueness_across_model_file_equations ',...
            'must be a structure containing the model file line ',...
            'numbers associated with all the parsed contents of the ',...
            'model file'];
    case 'BadInput4'
        msg = ['4th input received by ',...
            'check_for_var_uniqueness_across_model_file_equations ',...
            'must be a row cell array with three pieces of ',...
            'configuration information for the check, describing ',...
            'which equations and variables to cross-check and the ',...
            'side of the equation on which to check them'];
    case 'NoVarsInEq'
        msg = ['The equation on line number ',errArgs{1},' contains ',...
            'no variable of that type'];
    case 'TooManyVarsInEq'
        msg = ['The equation on line number ',errArgs{1},' contains ',...
            'too many variables of that type: ''',errArgs{2},''''];
    case 'BadUseOfVarAcrossEqs'
        msg = ['The equations on line numbers ',errArgs{1},' contain ',...
            'the same variable: ''',errArgs{2},''''];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CHECK IF MODEL COMPONENT EXISTS
function msg = get_check_if_model_component_exists_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['check_if_model_part_exists was not passed the right ',...
            'number of inputs: it requires 2 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by check_if_model_part_exists'...
            ' must be a standard MAPS LSS model object with constructors'...
            ' to allow the model to be unpacked.'];
    case 'BadInput2'
        msg = ['2nd input received by check_if_model_part_exists'...
            ' must be a string representing the model part to check for.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end


%% CHECK LSS MODEL FILE SYNTAX
function msg = get_check_LSS_model_file_syntax_error(errCode,errArgs)       %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['check_LSS_model_file_syntax was not passed the right ',...
            'number of inputs: it requires 4 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by check_LSS_model_file_syntax ',...
            'must be a structure containing the parsed contents of ',...
            'the model file'];
    case 'BadInput2'
        msg = ['2nd input received by check_LSS_model_file_syntax ',...
            'must be a structure containing the model file keywords ',...
            'associated with the parsed contents of the model file'];
    case 'BadInput3'
        msg = ['3rd input received by check_LSS_model_file_syntax ',...
            'must be a structure containing the model file line ',...
            'numbers associated with all the parsed contents of the ',...
            'model file'];
    case 'BadInput4'
        msg = ['4th input received by check_LSS_model_file_syntax ',...
            'must be an exception to add file syntax causes to'];
    case 'ContentConditionError'
        msg = ['MAPS found the following content condition errors. ',...
            'It is very likely that these errors will also show up in ',...
            'other syntax errors'];
    case 'ContentConditionError:Instance'
        msg = ['If ',errArgs{1},' are specified under ',errArgs{2},', ',...
            'then ',errArgs{3},' must also be specified under ',...
            errArgs{4}];
    case 'NumbersConditionError'
        msg = ['MAPS found the following inonsistencies in the ',...
            'numbers of various model comonents. It is very likely ',...
            'that these inconsistencies will also show up in other ',...
            'syntax errors'];
    case 'NumbersConditionError:Instance'
        msg = ['The number of ',errArgs{1},' specified under ',...
            errArgs{2},' must ',errArgs{3},' the number of ',...
            errArgs{4},' specified under ',errArgs{5}];
    case 'ModelEquationSyntaxErrors'
        msg = ['Model equations must be valid equations containing ',...
            'only model variables, shocks, parameters, steady state ',...
            '& parameter transformations and valid mathematical ',...
            'operators, symbols & numbers. MAPS found the following ',...
            'exceptions under ''',errArgs{1},''':'];
    case 'MeasurementEquationSyntaxErrors'
        msg = ['Measurement equations must be valid equations ',...
            'containing only model variables, model observables, ',...
            'measurement errors, parameters, steady state & parameter ',...
            'transformations and valid mathematical operators, ',...
            'symbols & numbers. In addition, the complete set of ',...
            'model observables must be identified uniquely across the ',...
            'LHS''s of the equations and model variables must be ',...
            'identified uniquely across the RHS''s of the equations. ',...
            'MAPS found the following exceptions under ''',...
            errArgs{1},''':'];
    case 'MeasurementEquationSyntaxErrors:NonUniqueModObsErrors'
        msg = ['Measurement equations must uniquely identify the set ',...
            'of model observables on their LHS''. MAPS found the ',...
            'following exceptions:'];
    case 'MeasurementEquationSyntaxErrors:NonUniqueModVarErrors'
        msg = ['Measurement equations must contain one and only one ',...
            'model variable on their RHS'' and there must be no ',...
            'repetition of model variables across the set of ',...
            'measurement equations. This ensures that forecast ',...
            'judgements can be imposed directly on to model ',...
            'observables because each model observable uniquely ',...
            'identifies a model variable. MAPS found the following ',...
            'exceptions:'];
    case 'DataTransformationSyntaxErrors'
        msg = ['Data transformations must be valid expressions ',...
            'containing only raw observables, valid mathematical ',...
            'operators (and a ''diff'' operator), symbols & ',...
            'numbers. In addition, the complete set of raw ',...
            'observables must be identified uniquely across the data ',...
            'transformations. MAPS found the following exceptions ',...
            'under ''',errArgs{1},''':'];
    case 'DataTransformationSyntaxErrors:NonUniqueRawObsErrors'
        msg = ['Data transformations must uniquely identify the set ',...
            'of raw observables. This ensures that forecast ',...
            'judgements can be imposed directly on to raw observables ',...
            'because each raw observable uniquely identifies a model ',...
            'observable. MAPS found the following exceptions:'];
    case 'TooManyDiffOperators'
        msg = ['The ''diff'' operator is used more than once in ''',...
            errArgs{1},''' on line number ',errArgs{2}];
    case 'SteadyStateDefinitionSyntaxErrors'
        msg = ['Steady states & parameter transformations must be ',...
            'valid expressions containing only steady states, ',...
            'parameters, valid mathematical operators, symbols & ',...
            'numbers. MAPS found the following exceptions under ''',...
            errArgs{1},''':'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CHECK MAPS MODEL FILE METADATA SYNTAX
function msg = get_check_MAPS_model_file_metadata_syntax_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['check_MAPS_model_file_metadata_syntax was not passed ',...
            'the right number of inputs: it requires 5 inputs but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by ',...
            'check_MAPS_model_file_metadata_syntax must be an ',...
            'exception to add file syntax causes to'];
    case 'BadInput2'
        msg = ['2nd input received by ',...
            'check_MAPS_model_file_metadata_syntax must be a ',...
            'structure containing the parsed contents of the model ',...
            'file'];
    case 'BadInput3'
        msg = ['3rd input received by ',...
            'check_MAPS_model_file_metadata_syntax must be a ',...
            'structure containing the model file keywords associated ',...
            'with the parsed contents of the model file'];
    case 'BadInput4'
        msg = ['4th input received by ',...
            'check_MAPS_model_file_metadata_syntax must be a ',...
            'structure containing the model file line numbers ',...
            'associated with all the parsed contents of the model file'];
    case 'BadInput5'
        msg = ['5th input received by ',...
            'check_MAPS_model_file_metadata_syntax must be a ',...
            'cell array of configuration information for the metadata ',...
            'syntax checking, describing which syntax checks to run ',...
            'and which parts of the model file syntax to check'];
    case 'MnemsNotUnique'
        msg = ['David Bradnum says: ''Don''t repeat yourself!''. All ',...
            'variable & parameter mnemonics must be unique ',...
            '(regardless of case)'];
    case 'MnemsNotUnique:Instance'
        msg = ['''',errArgs{1},''' was repeated on lines ',errArgs{2}];
    case 'MnemsNotUsed'
        msg = ['All variable & parameter mnemonics must be used ',...
            'in at least one equation'];
    case 'MnemsNotUsed:Instance'
        msg = ['''',errArgs{1},''' on line ',errArgs{2},' under ''',...
            errArgs{3},''''];
    case 'MnemsNotContinuous'
        msg = ['Variable & parameter mnemonics must be continuous ',...
            'expressions with no white/blank space characters'];
    case 'MnemsNotContinuous:Instance'
        msg = ['''',errArgs{1},''' on line ',errArgs{2},' under ''',...
            errArgs{3},''''];
    case 'MnemsTooLong'
        msg = ['Owing to FAME naming conventions, variable mnemonic ',...
            'strings must not exceed ',errArgs{1},' characters in length'];
    case 'MnemsTooLong:Instance'
        msg = ['''',errArgs{1},''' on line ',errArgs{2},' under ''',...
            errArgs{3},''''];
    case 'BannedMnems'
        bannedSymbols = create_comma_separated_list(errArgs);
        msg = ['In part owing to over zealous business analysis, the ',...
            'following symbols are reserved in MAPS & cannot be used ',...
            'as variable or parameter mnemonics: ''',bannedSymbols,''''];
    case 'BannedMnems:Instance'
        msg = ['''',errArgs{1},''' on line ',errArgs{2},' under ''',...
            errArgs{3},''''];
    case 'BannedMnemContent'
        bannedContent = create_comma_separated_list(errArgs);
        msg = ['The following symbols are reserved in MAPS/EASE & ',...
            'cannot be used as part of variable or parameter mnemonic ',...
            'strings: ''',bannedContent,''''];
    case 'BannedMnemContent:Instance'
        bannedContentFound = create_comma_separated_list(errArgs{4});
        msg = ['''',errArgs{1},''' on line ',errArgs{2},' under ''',...
            errArgs{3},''' contains ''',bannedContentFound,''''];
    case 'NamesNotUniqueWithinField'
        msg = ['David Bradnum says: ''Don''t repeat yourself!''. ',...
            'All names within a model field must be unqiue ',...
            '(regardless of case)'];
    case 'NamesNotUniqueWithinField:Instance'
        msg = ['''',errArgs{1},''' on lines ',errArgs{2},' under ''',...
            errArgs{3},''''];
    case 'NamesOverlapAcrossFields'
        msg = ['Names across certain model fields must be non- ',...
            'overlapping (regardless of case) to avoid conflicts in ',...
            'EASE & MAPS'];
    case 'NamesOverlapAcrossFields:Instance'
        msg = ['''',errArgs{1},''' on line ',errArgs{2},' under ''',...
            errArgs{3},''' also appears on ',errArgs{4},' under ''',...
            errArgs{5},''''];
    case 'NamesTooLong'
        msg = ['Owing to EASE metadata storage restrictions, ',...
            'variable, parameter & equation names must not exceed ',...
            errArgs{1},' characters in length'];
    case 'NamesTooLong:Instance'
        msg = ['''',errArgs{1},''' on line ',errArgs{2},' under ''',...
            errArgs{3},''''];
    case 'BannedNameContent'
        bannedContent = create_comma_separated_list(errArgs);
        msg = ['The following symbols are reserved in MAPS/EASE & ',...
            'cannot be used as part of variable, parameter or ',...
            'equation names: ''',bannedContent,''''];
    case 'BannedNameContent:Instance'
        bannedContentFound = create_comma_separated_list(errArgs{4});
        msg = ['''',errArgs{1},''' on line ',errArgs{2},' under ''',...
            errArgs{3},''' contains ''',bannedContentFound,''''];
    case 'BadMetadataFields'
        msg = ['The model metadata fields under ''',errArgs{1},...
            ''' must be complete'];
    case 'BadMetadataFields:MissingFields'
        missingFields = create_comma_separated_list(errArgs{1}');
        msg = ['The following field(s) is/are missing and must be ',...
            'included: ''',missingFields,''''];
    case 'BadMetadataFields:UnknownFields'
        unknownFields = create_comma_separated_list(errArgs{1});
        msg = ['The following field(s) on line(s) ',errArgs{2},' are ',...
            'unrecognised and must not be included: ''',unknownFields,...
            ''''];
    case 'BadParams'
        msg = ['Parameters must be valid (finite & real) numbers. ',...
            'The following found under ''',errArgs{1},''' are invalid ',...
            ' - please check the format of the lines against the ',...
            'format expected in the setup of the .maps file:'];
    case 'BadParams:Instance'
        msg = ['''',errArgs{1},''' on line ',errArgs{2}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CHECK MODEL FILE EQUATION SYNTAX
function msg = get_check_model_file_equation_syntax_error(errCode,errArgs)  %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['check_model_file_equation_syntax was not passed the ',...
            'right number of inputs: it requires 4 inputs but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by ',...
            'check_model_file_equation_syntax must be an exception to ',...
            'add file syntax causes to'];
    case 'BadInput2'
        msg = ['2nd input received by ',...
            'check_model_file_equation_syntax must be a structure ',...
            'containing the parsed contents of the model file'];
    case 'BadInput3'
        msg = ['3rd input received by ',...
            'check_model_file_equation_syntax must be a structure ',...
            'containing the model file line numbers associated with ',...
            'all the parsed contents of the model file'];
    case 'BadInput4'
        msg = ['4th input received by ',...
            'check_model_file_equation_syntax must be a ',...
            'cell array of configuration information for the equation ',...
            'syntax checking, describing the permitted terms and ',...
            'format of the equations'];
    case 'BadInput5'
        msg = ['5th input received by ',...
            'check_model_file_equation_syntax must be a MAPS model ',...
            'structure'];
    case 'BadEquation'
        msg = ['Line ',errArgs{1},': ''',errArgs{2},''''];
    case 'UnrecognisedTerms'
        unrecognisedTerms = create_comma_separated_list(errArgs);
        msg = ['''',unrecognisedTerms,''' cannot be found among the ',...
            'valid variables/parameters'];
    case 'BadTimeSubscript'
        if ~isempty(errArgs{2})
            msg = ['''',errArgs{1},''' has an invalid ''',...
                errArgs{2},''' time subscript'];
        else
            msg = ['''',errArgs{1},''' must have a time subscript'];
        end
    case 'WrongEquationSide'
        msg = ['''',errArgs{1},''' must appear on the ',errArgs{2},...
            ' of the equation'];
    case 'RepeatedType'
        repeatedTypeMnems = create_comma_separated_list(errArgs);
        msg = ['''',repeatedTypeMnems,''' should not appear in the ',...
            'same equation'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end


%% CHECK STRINGS APPEAR IN REFERENCE LIST
function msg = get_check_strings_appear_in_reference_list_error(...
        errCode,errArgs)                                                    %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['check_strings_appear_in_reference_list was not passed ',...
            'the right number of inputs: it requires 2 or 3 inputs ',...
            'but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by ',...
            'check_strings_appear_in_reference_list must be a column ',...
            'cell array of reference strings aginst which to compare ',...
            'the input strings'];
    case 'BadInput2'
        msg = ['2nd input received by ',...
            'check_strings_appear_in_reference_list must be a string ',...
            'or column cell string array to compare against the ',...
            'reference list'];
    case 'BadInput3'
        msg = ['Optional 3rd input received by ',...
            'check_strings_appear_in_reference_list must be a MAPS ',...
            'exception identifier string'];        
    case 'MissingStrings'
        msg = ['The following strings could not be found in the ',...
            'reference list:'];
    case 'MissingStrings:Instance'
        msg = errArgs{1};      
    otherwise
        throw_missing_error_code_error(errCode);
end
end


%% COMPUTE EQUATIONS INCIDENCE MATRIX
function msg = get_compute_equations_incidence_matrix_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compute_equations_incidence_matrix was not passed the '...
            'right number of inputs: it requires 2 or 3 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'compute_equations_incidence_matrix must be a column cell ',...
            'array of equation strings'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'compute_equations_incidence_matrix must be a column cell ',...
            'string array of mnemonics to compute the incidence ',...
            'matrix for'];
    case 'BadInput3'
        msg = ['Optional 3rd input passed to ',...
            'compute_equations_incidence_matrix must be a scalar, ',...
            'logical describing whether or not time subscripts should ',...
            'be taken into account in computing the incidence matrix'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% COMPUTE EQUATIONS INCIDENCE MATRIX IN STRING FORMAT
function msg = ...
    get_compute_equations_incidence_matrix_in_string_format_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compute_equations_incidence_matrix_in_string_format ',...
            'was not passed the right number of inputs: it requires ',...
            '3 or 4 inputs, but received ',errArgs{1}];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'compute_equations_incidence_matrix_in_string_format must ',...
            'be a column cell array of equation names'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% COMPUTE MINIMUM STATE SPACE REPRESENTATION
function msg = ...
    get_compute_minimum_state_space_representation_error(errCode,errArgs)   %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compute_minimum_state_space_representation was not '...
            'passed the right number of inputs: it requires 1 input, ',...
            'but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'compute_minimum_state_space_representation must be a ',...
            'MAPS LSS model structure'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% COMPUTE OBSERVABLES FROM MODEL VARIABLES
function msg = get_compute_observables_from_model_variables_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compute_observables_from_model_variables was not ',...
            'passed the right number of inputs: it requires either 3 ',...
            '(if measurement errors are not passed in) or 5 (if ',...
            'measurement errors are passed in) inputs, but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'compute_observables_from_model_variables must be a ',...
            'finite, numeric two-dimensional matrix dataset of model ',...
            'variables'];
    case 'BadInput5'
        msg = ['Optional, model dependent 5th input passed to ',...
            'compute_observables_from_model_variables must be a ',...
            'finite, numeric two-dimensional matrix dataset of ',...
            'measurement errors'];
    case 'IncompatibleGx'
        msg = ['The model variable dataset and the matrix of model ',...
            'variable loadings from the measurement equations must ',...
            'have consistent dimensions (as measured by the number of ',...
            'rows in the dataset and the number of columns in the ',...
            'loadings)'];
    case 'IncompatibleVw'
        msg = ['The measurement error dataset and the matrix of ',...
            'measurement error loadings from the measurement ',...
            'equations must have consistent dimensions (as measured ',...
            'by the number of rows in the dataset and the number of ',...
            'columns in the loadings)'];
    case 'Incompatiblexw'
        msg = ['The measurement error and model variable dataset must ',...
            'have the same number of data points (as measured by the ',...
            'number of columns in the two datasets)'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end



%% CONSTRUCT DEFAULT STRUCTURE FROM CELL ARRAY CONFIG
function msg = ...
    get_construct_default_structure_from_cell_array_config_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['construct_default_structure_from_cell_array_config ',...
            'was not passed the right number of inputs: it requires ',...
            '1 input but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'construct_default_structure_from_cell_array_config must ',...
            'be a two-column cell array of field name (strings) and ',...
            'default value pairs'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONSTRUCT MAPS DECOMP INSTRUCTIONS FORM EASE INPUTS
function msg = ...
    get_construct_MAPS_decomp_instructions_from_EASE_inputs_error...
    (errCode,errArgs)                                                       %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['Number of inputs received by '...
            'construct_MAPS_decomp_instructions_from_EASE_inputs'...
            ' is not right: we expected 2 inputs but received '...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by '...
            'construct_MAPS_decomp_instructions_from_EASE_inputs'...
            ' is not as expected: it must be a structure'];
    case 'BadInput2'
        msg = ['2nd input received by '...
            'construct_MAPS_decomp_instructions_from_EASE_inputs'...
            ' is not as expected: it must be a cell'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT CELL ARRAY OF VECTORS TO MATRIX EQUIVALENT
function msg = ...
    get_convert_cell_array_of_vectors_to_matrix_equivalent_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_cell_array_of_vectors_to_matrix_equivalent ',...
            'was not passed the right number of inputs: it requires 1 ',...
            'or 2 inputs (depending on whether the optional matrix ',...
            'column numbers argument is passed in), but only received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'convert_cell_array_of_vectors_to_matrix_equivalent must ',...
            'be a column cell array of numeric or logical row vectors'];
    case 'BadInput2'
        msg = ['Optional 2nd input passed to ',...
            'convert_cell_array_of_vectors_to_matrix_equivalent must ',...
            'be a numeric integer representing the number of columns ',...
            'to be included in the output matrix'];
    case 'IncompatibleColNums'
        msg = ['The number of columns specified to be included in the ',...
            'output matrix must not be smaller than the longest row ',...
            'vector in the column cell array input (i.e. this ',...
            'function cannot be used to remove data from the input ',...
            'vectors)'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT COLUMN STRING ARRY TO BOOLEAN EQUIVALENT
function msg = ...
    get_convert_column_string_array_to_boolean_equivalent_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_column_string_array_to_boolean_equivalent ',...
            'was not passed the right number of inputs: it requires 1 ',...
            'input, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'convert_column_string_array_to_boolean_equivalent must ',...
            'be a column cell string array or single string'];
    case 'InvalidBooleanStrs'
        permittedStrLogicals = create_comma_separated_list(errArgs);
        msg = ['MAPS permits ', permittedStrLogicals,' as valid ',...
            'string logicals. The following strings, therefore, are ',...
            'not valid MAPS string logicals:'];
    case 'InvalidBooleanStrs:Instance'
        msg = ['''',errArgs{1},''''];        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT COLUMN STRING ARRY TO NUMERIC EQUIVALENT
function msg = ...
    get_convert_column_string_array_to_numeric_equivalent_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_column_string_array_to_numeric_equivalent ',...
            'was not passed the right number of inputs: it requires 1 ',...
            'or 2 inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'convert_column_string_array_to_nuermic_equivalent must ',...
            'be a column cell string array or single string'];
    case 'BadInput2'
        msg = ['Optional 2nd input passed to ',...
            'convert_column_string_array_to_nuermic_equivalent must ',...
            'be a scalar logical dictating whether or not to check ',...
            'that the strings are valid representations of numerics'];
    case 'BadStringNumerics'
        msg = ['One or more of the input strings is not a valid ',...
            'string representation of a number - MAPS found the ',...
            'following exceptions:'];
    case 'BadStringNumerics:Instance'
        msg = ['''',errArgs{1},''''];
    otherwise
        throw_missing_error_code_error(errCode);
end
end


%% CONVERT EQUATIONS TO MODEL ORDERED FUNCTION HANDLE
function msg = ...
    get_convert_equations_to_model_ordered_function_handle_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_equations_to_model_ordered_function_handle ',...
            'was not passed the right number of inputs: it requires 4 ',...
            'inputs, but received ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT EXPLICIT EQUATIONS TO IMPLICIT
function msg = get_convert_explicit_equations_to_implicit_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_explicit_equations_to_implicit was not passed ',...
            'the right number of inputs: it requires 3 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'convert_explicit_equations_to_implicit must be a column ',...
            'cell array of equation strings'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT EXPRESSIONS TO FUNCTION HANDLE
function msg = get_convert_expressions_to_function_handle_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_expressions_to_function_handle was not passed ',...
            'the right number of inputs: it requires 1 input, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'convert_expressions_to_function_handle must be a two-',...
            'dimensional cell string array of expressions'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT LOGICAL COLUMN VECTOR TO STRING EQUIVALENT
function msg = ...
    get_convert_logical_column_vector_to_string_equivalent_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_logical_column_vector_to_string_equivalent ',...
            'was not passed the right number of inputs: it requires 1 ',...
            'input, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'convert_logical_column_vector_to_string_equivalent must ',...
            'be a column vector of logicals'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end


%% CONVERT NUMERIC COLUMN VECTOR TO STRING EQUIVALENT
function msg = ...
    get_convert_numeric_column_vector_to_string_equivalent_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_numeric_column_vector_to_string_equivalent ',...
            'was not passed the right number of inputs: it requires 1 ',...
            'input, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'convert_numeric_column_vector_to_string_equivalent must ',...
            'be a finite real numeric column vector'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT NUMERIC SCALAR TO STRING EQUIVALENT
function msg = get_convert_numeric_scalar_to_string_equivalent_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_numeric_scalar_to_string_equivalent was not ',...
            'passed the right number of inputs: it requires 1 input, ',...
            'but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'convert_numeric_scalar_to_string_equivalent must be a ',...
            'real numeric scalar'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT PARAMETER NUMERICS TO STRINGS
function msg = get_convert_parameter_numerics_to_strings_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_parameter_numerics_to_strings was not passed ',...
            'the right number of inputs: it requires 1 or 3 inputs ',...
            '(depending on whether parameter bounds are passed in), ',...
            'but received ',errArgs{1}];
    case 'InconsistentNargoutNargin'
        msg = ['If only 1 onput is passed in to ',...
            'convert_parameter_numerics_to_strings, then only 1 ',...
            'output argument can be requested'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT PARAMETER STRINGS TO NUMERICS
function msg = get_convert_parameter_strings_to_numerics_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_parameter_strings_to_numerics was not passed ',...
            'the right number of inputs: it requires 1 or 3 inputs ',...
            '(depending on whether parameter bounds are passed in), ',...
            'but received ',errArgs{1}];
    case 'InconsistentNargoutNargin'
        msg = ['If only 1 onput is passed in to ',...
            'convert_parameter_strings_to_numerics, then only 1 ',...
            'output argument can be requested'];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'convert_parameter_strings_to_numerics must be a column ',...
            'cell array of string representations of parameter values'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'convert_parameter_strings_to_numerics must be a column ',...
            'cell array of string representations of parameter lower ',...
            'bound values'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'convert_parameter_strings_to_numerics must be a column ',...
            'cell array of string representations of parameter upper ',...
            'bound values'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT STRING TO ALTERNATIVE DATA TYPE
function msg = ...
    get_convert_string_or_vector_string_array_to_column_array_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_string_or_vector_string_array_to_column_array ',...
            'was not passed the right number of inputs: it requires 1 ',...
            'input, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'convert_string_or_vector_string_array_to_column_array ',...
            'must be a string, column or row cell string array'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT STRING TO ALTERNATIVE DATA TYPE
function msg = get_convert_string_to_alternative_data_type_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_string_to_alternative_data_type was not ',...
            'passed the right number of inputs: it requires 2 or 3 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'convert_string_to_alternative_data_type must be a string ',...
            'or column cell string array to convert'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'convert_string_to_alternative_data_type must be a string ',...
            'describing the target data type for the input string or ',...
            'strings'];
    case 'BadInput3'
        msg = ['Optional 3rd input passed to ',...
            'convert_column_string_array_to_nuermic_equivalent must ',...
            'be a scalar logical dictating whether or not to check ',...
            'that the input strings are valid representations of ',...
            'the numeric class (if relevant) or not'];        
    case 'UnhandledDataType'
        msg = ['The input data type ''',errArgs{1},''' is not handled ',...
            'by this function'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT SYMBOLIC MATRICES TO FUNCTION HANDLES
function msg = get_convert_symbolic_matrices_to_function_handles_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_symbolic_matrices_to_function_handles was ',...
            'not passed the right number of inputs: it requires 3 ',...
            'inputs, but received ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT SYMBOLIC MATRIX TO FUNCTION HANDLE
function msg = get_convert_symbolic_matrix_to_function_handle_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_symbolic_matrix_to_function_handle was ',...
            'not passed the right number of inputs: it requires 3 ',...
            'inputs, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'convert_symbolic_matrix_to_function_handle must be a two-',...
            'dimensional symbolic matrix (compatible with the MATLAB ',...
            'symbolic toolbox)'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE COMMA SEPARATED LIST
function msg = get_create_comma_separated_list_error(errCode,errArgs)       %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_comma_separated_list was not passed the right ',...
            'number of inputs: it requires 1 input, but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to create_comma_separated_list must ',...
            'a row or column cell string array'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE TAB ALIGNED TABLE FROM CELL STRING ARRAY
function msg = ...
    get_create_tab_aligned_table_from_cell_string_array_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_tab_aligned_table_from_cell_string_array was ',...
            'not passed the right number of inputs: it requires 1 ',...
            'input, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'create_tab_aligned_table_from_cell_string_array must be ',...
            'a two-dimensional cell string array'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end


%% DETERMINE STATIONARITY OF RAW OBSERVABLES
function msg = get_determine_stationarity_of_raw_observables_error(...
    errCode,~)                                                              %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['determine_stationarity_of_raw_observables was not ',...
            'passed the right number of inputs: it requires 1 input ',...
            'but did not receive any'];
    case 'BadInput1'
        msg = ['1st input received by ',...
            'determine_stationarity_of_raw_observables must be a MAPS '...
            'linear state space model structure'];        
    case 'BadModelClass'
        msg = ['The model passed in as input must be of the linear ',...
            'state space class'];
    case 'BadModelCharacteristic'
        msg = ['The model passed in as input must have data ',...
            'transformation equations and raw observables otherwise ',...
            'there is no way of determining whether or not the raw ',...
            'observables are stationary!'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end


%% DOES MODEL COMPONENT CONTAIN ELEMENT
function msg = get_does_model_component_contain_element_error(...
    errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['does_model_component_contain_element was not'...
            ' passed the right number of inputs: it requires 3 but received',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by does_model_component_contain_'...
            'element must be a MAPS model structure with a '...
            'Constructor field'];
    case 'BadInput2'
        msg = ['2nd input received by does_model_component_contain_'...
            'element must be a string representing the '...
            'model component to look for the element in, e.g. xMnems.'];
    case 'BadInput3'
        msg = ['3rd input received by does_model_component_contain_'...
            'element must be a cell containing a string representing the '...
            'model element to look for, e.g. gdp.']; 
    case 'NonExistentComponent'
        msg = ['The model component, ',errArgs{1},', in which you asked '...
            'to look for the element, ',errArgs{2},',  was not found in'...
            ' the model provided.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% DOES MODEL COMPONENT EXIST
function msg = get_does_model_component_exist_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['does_model_component_exist was not passed the right '...
            'number of inputs: it requires 2 but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['The first input passed to does_model_component_exist '...
            'must be a valid MAPS model structure.'];
    case 'BadInput2'
        msg = ['The second input passed to does_model_component_exist '...
            'must be a string representing the model component to '...
            'check for.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end        


%% GENERATE MAPS EXCEPTION ADD CAUSES AND THROW
function msg = get_generate_MAPS_exception_add_causes_and_throw_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['generate_MAPS_exception_add_causes_and_throw was not ',...
            'passed the right number of inputs: it requires 3 or 4 ',...
            'inputs, but received ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% GENERATE MAPS EXCEPTION AND ADD CAUSES FROM LIST
function msg = get_generate_MAPS_exception_and_add_causes_from_list_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['generate_MAPS_exception_and_add_causes_from_list was ',...
            'not passed the right number of inputs: it requires 3 or ',...
            '4 inputs, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'generate_MAPS_exception_and_add_causes_from_list must be ',...
            'a string representing the name of the exception ',...
            'identifier for the exception to create'];
    case 'BadInput4'
        msg = ['Optional 4th input passed to ',...
            'generate_MAPS_exception_and_add_causes_from_list must be ',...
            'a row cell string array of arguments for the exception ',...
            'to create'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE FIRST ORDER SYMBOLIC SYSTEM
function msg = get_create_first_order_symbolic_system_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_first_order_symbolic_system was not passed the '...
            'right number of inputs: it requires 3 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'create_first_order_symbolic_system must be a column cell ',...
            'array of equation strings'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'create_first_order_symbolic_system must be a column cell ',...
            'string array of variable mnenomics appearing in the ',...
            'equation strings.'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'create_first_order_symbolic_system must be a column ',...
            'vector of real, finite values.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE FUNCTION HANDLE FROM MATRIX STRING
function msg = get_create_function_handle_from_matrix_string_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_function_handle_from_matrix_string was not ',...
            'passed the right number of inputs: it requires 3 inputs, ',...
            'but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'create_function_handle_from_matrix_string must be a ',...
            'character (string) representation of a matrix (or CLOB, ',...
            'meaning Character Large OBject)'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'create_function_handle_from_matrix_string must be a ',...
            'row cell array of column cell string arrays of mnemonics ',...
            'describing the expected content of the matrix string ',...
            'organised by type (eg a column vector of variable ',...
            'mnemonics as the 1st element and a column vector of ',...
            'parameter mnemonics as the 2nd element)'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'create_function_handle_from_matrix_string must be a ',...
            'row cell string array of the names of each type of ',...
            'variable and/or parameter in the matrix string: these ',...
            'names are used as the input names in the resulting ',...
            'function handle - see MAPS documentation or the header ',...
            'in the function for more details'];
    case 'InconsistentNargs'
        msg = ['The number of matrix string arguments (the number of ',...
            'elements in the 1st cell input) must equal the number of ',...
            'matrix string argument names (the number of elements in ',...
            'the 2nd cell input)'];
    case 'InvalidFunHandleArgNames'
        msg = ['The function handle argument names (3rd input) must ',...
            'contain only alpha-numeric characters (eg ''theta'' or ',...
            '''theta0'' or ''theta_0'''];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE FUNCTION HANDLE INCL PARENS
function msg = get_create_function_handle_incl_parens_error_msg_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_function_handle_incl_parens_error_msg was not passed ',...
            'the right number of inputs: it requires 2 or 3 inputs, ',...
            'but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'create_function_handle_incl_parens_error_msg must be a column ',...
            'cell string array of the RHS of the equation system'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'create_function_handle_incl_parens_error_msg must be a column ',...
            'cell string array of the mnemonics for the ',...
            'variables in the system which are not on the LHS'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'create_function_handle_incl_parens_error_msg must be a column ',...
            'cell string array of parameter mnemonics'];
    case 'NestedParensError'
        msg = ['Phil Evans apologises for the inconvenience, but MAPS ',...
            'cannot solve your model.\n\nThe recursive solution ',...
            'algorithm implemented in MAPS involves successively ',...
            'substituting out contemporaneous endogenous variables ',...
            'until the entire system is a function of lagged ',...
            'variables alone. A by-product of this is that ',...
            'parentheses are added to every equation in which a ',...
            'contemporaneous variable appears when it is ',...
            'substituted out. If your model is large (and closer to ',...
            'being simultaneous), a large number of parentheses may ',...
            'have been added. Unfortunately, MATLAB ',...
            'cannot evaluate expressions with more than 32 levels of ',...
            'nested parentheses and the MAPS constructed recursive ',...
            'solution to your model has at least 32 nested ',...
            'parentheses in at least one solved-out equation.\n\nOne ',...
            'way of working round this problem is to search for and ',...
            'remove unnecessary parentheses from your model and/or ',...
            'expand out expressions involving parentheses. If after ',...
            'doing that you still see this error, please call Phil ',...
            'Evans on x4119.\n\nThe original MATLAB error message is ',...
            'displayed below:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE LAG IDENTITIES
function msg = get_create_lag_identities_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_lag_identities was not passed the '...
            'right number of inputs: it requires 3 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'create_lag_identities must be a column cell ',...
            'string array of variable mnenomics appearing in the ',...
            'equation strings'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'create_lag_identities must be a column ',...
            'vector of real, finite values'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE LAG IDENTITY INITIAL CONDITIONS
function msg = get_create_lag_identity_initial_conditions_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_lag_identity_initial_conditions was not ',...
            'passed the right number of inputs: it requires 3 inputs,',...
            'but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'create_lag_identity_initial_conditions must be a ',...
            'structure summarising the variable information'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'create_lag_identities_initial_conditions must be a data ',...
            'structure to be used to create the lag identity initial ',...
            'conditions'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'create_lag_identities_initial_conditions must be a non-',...
            'negative integer corresponding to the model lag order'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE LAG MNEMONICS
function msg = get_create_lag_mnemonics_error(errCode,errArgs)              %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_lag_mnemonics was not passed the right number ',...
            'of inputs: it requires 1 input, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to create_lag_mnemonics must be a ',...
            'column cell string array of variable mnemonics to create ',...
            'lagged versions of (using the ''_b'' convention in MAPS)'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE LEAD MNEMONICS
function msg = get_create_lead_mnemonics_error(errCode,errArgs)             %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_lead_mnemonics was not passed the right number ',...
            'of inputs: it requires 1 input, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to create_lead_mnemonics must be a ',...
            'column cell string array of variable mnemonics to create ',...
            'lead versions of (using the ''_f'' convention in MAPS)'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE LSS MODEL EQUATION NUMERICS
function msg = ...
    get_create_LSS_model_equation_numerics_error(errCode,errArgs)           %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_LSS_model_equation_numerics was not passed the ',...
            'right number of inputs: it requires 5 inputs but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'create_LSS_model_equation_numerics must be a row cell ',...
            'array containing a vector of parameter values and, ',...
            'depending on the model, a vector of steady state & ',...
            'parameter transformation values'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE LSS MODEL
function msg = get_create_LSS_model_error(errCode,errArgs)                  %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_LSS_model was not passed the right number of ',...
            'inputs: it requires 1 input but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to create_LSS_model must be a full ',...
            'path file name string to a .maps linear state space ',...
            'model info file'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE LSS MODEL INVERSION INSTRUCTIONS
function msg = get_create_LSS_model_inversion_instructions_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_LSS_model_inversion_instructions was not ',...
            'passed the right number of inputs: it requires 4 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'create_LSS_model_inversion_instructions must be a MAPS ',...
            'linear state space model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'create_LSS_model_inversion_instructions must be a MAPS ',...
            'formatted forecast run dataset structure'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'create_LSS_model_inversion_instructions must be a ',...
            'judgement content descriptor structure as output by the ',...
            'linear state space model judgements dataset validation ',...
            'routine'];
    case 'BadInput4'
        msg = ['4th input passed to ',...
            'create_LSS_model_inversion_instructions must be a ',...
            'judgement information structure as output by the linear ',...
            'state space model judgements dataset validation routine'];
    case 'BadJudgementsInput'
        msg = ['The judgements input must constain some endogenous ',...
            'varaible fixes for an input for the inversion module to ',...
            'be created. If the judgements do not include fixes to ',...
            'endogenous variables (in any space), then there is no ',...
            'need to call this helper or do a linear state space ',...
            'model inversion'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE LSS MODEL FILE
function msg = get_create_LSS_model_file_error(errCode,errArgs)             %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_LSS_model_file was not passed the right ',...
            'number of inputs: it requires 2 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to create_LSS_model_file must be a ',...
            'MAPS linear state space model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to create_LSS_model_file must be a ',...
            'full path file name string of a .maps linear state space ',...
            'model info file to create'];
    case 'BadModelClass'
        msg = ['MAPS model input to create_LSS_model_file must be of ',...
            'the linear state space model class'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE LSS MODEL NUMERICS
function msg = get_create_LSS_model_numerics_error(errCode,errArgs)         %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_LSS_model_numerics was not passed the right ',...
            'number of inputs: it requires 1 or 2 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to create_LSS_model_numerics must ',...
            'be a MAPS linear state space model structure with parsed ',...
            'model info and symbolic information'];
    case 'BadModelClass'
        msg = ['MAPS model input to create_LSS_model_file must be of ',...
            'the linear state space model class'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE LSS MODEL SYMBOLICS
function msg = get_create_LSS_model_symbolics_error(errCode,errArgs)        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_LSS_model_symbolics was not passed the right ',...
            'number of inputs: it requires 1 input but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to create_LSS_model_symbolics must ',...
            'be a MAPS linear state space model structure containing ',...
            'parsed model info'];
    case 'BadModelClass'
        msg = ['MAPS model input to create_LSS_model_symbolics must ',...
            'be of the linear state space model class'];
    case 'NonRecursiveSS'
        msg = ['MAPS'' could not recursively reduce the system of ',...
            'steady states and parameter transformations. MAPS'' ',...
            'recursive system solver/reducer returned the following ',...
            'error:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE LSS STRUCTURAL SYMBOLIC MATRICES
function msg = get_create_LSS_structural_symbolic_matrices_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_LSS_structural_symbolic_matrices was not ',...
            'passed the right number of inputs: it requires 1, 5, 7 ',...
            'or 8 inputs (depending on input mode, model type and ',...
            'output arguments required) being used, but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'create_LSS_structural_symbolic_matrices must be a MAPS ',...
            'linear state space model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'create_LSS_structural_symbolic_matrices must be a column ',...
            'cell sring array of model equations'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'create_LSS_structural_symbolic_matrices must be a column ',...
            'cell sring array of model variable mnemonics'];
    case 'BadInput4'
        msg = ['4th input passed to ',...
            'create_LSS_structural_symbolic_matrices must be a column ',...
            'cell sring array of shock mnemonics'];
    case 'BadInput5'
        msg = ['5th input passed to ',...
            'create_LSS_structural_symbolic_matrices must be a row ',...
            'cell array of column cell string arrays of parameter and ',...
            '(model dependent) steady state mnemonics'];
    case 'BadInput6'
        msg = ['6th input passed to ',...
            'create_LSS_structural_symbolic_matrices must be a column ',...
            'cell sring array of measurement equations'];
    case 'BadInput7'
        msg = ['7th input passed to ',...
            'create_LSS_structural_symbolic_matrices must be a column ',...
            'cell sring array of model observable mnemonics'];
    case 'BadInput8'
        msg = ['8th input passed to ',...
            'create_LSS_structural_symbolic_matrices must be a column ',...
            'cell sring array of measurement error mnemonics'];
    case 'BadModelClass'
        msg = ['MAPS model input to ',...
            'create_LSS_structural_symbolic_matrices must be of the ',...
            'linear state space model class'];
    case 'BadNargoutMeasEqs'
        msg = ['The model input does not contain measurement ',...
            'equations so no more than 4 output arguments can be ',...
            'specified'];
    case 'BadNargoutMeasErs'
        msg = ['The model input does not contain measurement ',...
            'errors so no more than 6 output arguments can be specified'];
    case 'BadNarginMeasEqs'
        msg = ['The model input does not contain measurement ',...
            'equations so no more than 5 input arguments should be ',...
            'passed in'];
    case 'BadNarginMeasErs'
        msg = ['The model input does not contain measurement ',...
            'errors so no more than 7 input arguments should be ',...
            'passed in'];
    case 'TooFewThetaAndSS'
        msg = ['The model input contains steady states so the ',...
            'parameter and steady state mnemonics cell passed in as ',...
            '5th input should have two elements'];
    case 'TooManyThetaAndSS'
        msg = ['The model input does not contain steady states so the ',...
            'parameter and steady state mnemonics cell passed in as ',...
            '5th input should have only one element'];
    case 'BadNarginMeasEqsNargout'
        msg = ['Measurement equation symbolic matrices were requested ',...
            'in the output argument list, so ',...
            'create_LSS_structural_symbolic_matrices must be passed ',...
            'either 1 or at least 7 inputs'];
    case 'BadNarginMeasErsNargout'
        msg = ['Measurement equation symbolic matrices were requested ',...
            'in the output argument list and the model input contains ',...
            'measurement errors, so ',...
            'create_LSS_structural_symbolic_matrices must be passed 1 ',...
            'or 8 inputs'];
    case 'MeasEqsReorderError'
        msg = ['Richard Harrison says: ''Congratulations, you have ',...
            'hit one of the only holes in MAPS model file syntax ',...
            'checking. I blame Matt Waldron - you just can''t get the ',...
            'staff these days...maybe it''s a case of peanuts & ',...
            'monkeys. Anyhow, enough from me and over to Matt.'' Matt ',...
            'says: ''Thanks for your kind words Rich. The likely ',...
            'cause of this error is that the LHS of one or more of ',...
            'your measurement equations specifies a non-linear ',...
            'function of a model observable (which is against the ',...
            'rules). Here is how the error showed up in MAPS:'''];
    case 'BadlySpecifiedModelEqs'
        msg = ['Model equations must be linear with respect to model ',...
            'variables & shocks and mean zero (i.e. no constants). ',...
            'MAPS found the following exceptions:'];
    case 'BadlySpecifiedModelEqs:ConstantInModelEq'
        msg = ['The following term appears as a constant in ''',...
            errArgs{1},''': ''',errArgs{2},''''];
    case 'BadlySpecifiedMeasEqs'
        msg = ['Measurement equations must be linear with respect to ',...
            'model variables & measurement errors. MAPS found the ',...
            'following exceptions:'];
    case 'NonLinearity'
        msg = ['The following terms appear as part of non-linear ',...
            'expressions in ''',errArgs{1},''''];
    case 'NonLinearity:Instance'
        msg = ['''',errArgs{1},''''];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE MAPS MODEL FILE
function msg = get_create_MAPS_model_file_text_info_error(errCode,errArgs)  %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_MAPS_model_file_text_info was not passed the ',...
            'right number of inputs: it requires 3 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to create_MAPS_model_file_text_info ',...
            'must be a structure representing a MAPS model object'];
    case 'BadInput2'
        msg = ['2nd input passed to create_MAPS_model_file_text_info ',...
            'must be a four-column cell string array containing model ',...
            'file configuration information'];
    case 'BadInput3'
        msg = ['3rd input passed to create_MAPS_model_file_text_info ',...
            'must be a string representing the file name to write the ',...
            'model information out to'];
    case 'InvalidModel'
        msg = 'The input model was invalid for the following reason(s):';
    case 'BadModelContent'
        msg = ['MAPS could not reconstruct the information associated ',...
            'with the ''',errArgs{1},''' model file keyword. That ',...
            'information contained the following errors:'];
    case 'BadDataDims'
        msg = ['Model data to be written out to MAPS model files must ',...
            'be represented in column arrays (string arrays or ',...
            'vectors). The data from the model associated with the ''',...
            errArgs{1},''' model object identifier was not a column ',...
            'array and so cannot be written out to a MAPS model file'];
    case 'BadDataType'
        msg = ['Information to write out to the maps file must be in ',...
            'a numeric column vector or a column cell string array. ',...
            'The data associated with ''',errArgs{1},''' was not in ',...
            'a cell string array as expected'];
    case 'MissingModelContent'
        msg = ['It is compulsory for the model to contain information ',...
            'associated with ''',errArgs{1},''' but this information ',...
            'was missing from the model'];
    case 'InconsistentFieldSizes'
        msg = ['All of the seperate components of the model to ',...
            'amalgamate togther and write out under the above keyword ',...
            'must have the same number of lines such that they can be ',...
            'combined together. One or more of ''',errArgs{1},''' had ',...
            'different numbers of lines'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE MEASUREMENT EQS NUMERICS
function msg = ...
    get_create_measurement_equation_numerics_error(errCode,errArgs)         %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_measurement_equation_numerics was not passed ',...
            'the right number of inputs: it requires 3 or 4 inputs, ',...
            'but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'create_measurement_equation_numerics must be a row cell ',...
            'array containing a vector of parameter values and, ',...
            'depending on the model, a vector of steady state & ',...
            'parameter transformation values'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE MODEL AND RUN BAYESIAN ESTIMATION SUPER MACRO
function msg = ...
    get_create_model_and_run_bayesian_estimation_super_macro_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_model_and_run_bayesian_estimation_super_macro ',...
            'was not passed the right number of inputs: it requires ',...
            'at least 1 input, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by ',...
            'create_model_and_run_bayesian_estimation_super_macro ',...
            'must be a string representing a MAPS model file'];
    case 'BadModelFile'
        msg = ['MAPS cannot proceed with the Bayesian estimation ',...
            'because it was not possible to create a model from ',...
            errArgs{1},'. MAPS'' model creation function returned the ',...
            'following error(s):'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end        

%% CREATE MODEL
function msg = get_create_model_error(errCode,errArgs)                      %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_model was not passed the right number of ',...
            'inputs: it requires 1 input but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to create_model must be a full path ',...
            'file name string to a .maps model info file'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE MODEL FILE
function msg = get_create_model_file_error(errCode,errArgs)             %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_model_file was not passed the right number ',...
            'of inputs: it requires 2 inputs but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to create_model_file must be a MAPS ',...
            'model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to create_model_file must be a full ',...
            'path file name string of a .maps model info file to create'];
    case 'ModelClassDeterminationFailure'
        msg = ['MAPS was unable to create the model file because it ',...
            'could not determine whether the input model was linear ',...
            'state space or non-linear backward-looking. MAPS'' model ',...
            'unpacker returned the following error:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end



%% CREATE PRINTABLE FILE NAME STRING
function msg = get_create_printable_file_name_string_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_printable_file_name_string was not passed the ',...
            'right number of inputs: it requires 1 input, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to create_printable_file_name_string ',...
            'must be a string representing a full-path file name'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end


%% CREATE SYMBOLIC EQUATIONS
function msg = get_create_symbolic_equations_error(errCode,errArgs)         %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_symbolic_equations was not passed the right ',...
            'number of inputs: it requires 1 inputs, but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to create_symbolic_equations must be ',...
            'column cell string array of equations'];
    case 'SymEqCreationFailure'
        msg = ['It was not possible to create a symbolic equivalent ',...
            'for ''',errArgs{1},'''. MATLAB''s symbolic toolbox ',...
            'returned the following error:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE SYMBOLIC MNEMONICS
function msg = get_create_symbolic_mnemonics_error(errCode,errArgs)         %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_symbolic_mnemonics was not passed the right ',...
            'number of inputs: it requires 1 inputs, but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to create_symbolic_mnemonics must be ',...
            'column cell string array of mnemonics'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% DATA VALIDATION FAMILY OF FUNCTIONS
function msg = get_data_validation_family_of_functions_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = [errArgs{1},' was not passed the right number of ',...
            'inputs: it requires 1 input but was not passed any'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end


%% ELIMINATE ENDOGENOUS VARIABLES FROM EQUATIONS
function msg = get_eliminate_endogenous_variables_from_equations_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['eliminate_endogenous_variables_from_equations was ',...
            'not passed the right number of inputs: it requires 2 ',...
            'inputs, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'eliminate_endogenous_variables_from_equations must be a ',...
            'column cell array of equation strings'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'eliminate_endogenous_variables_from_equations must be a ',...
            'column cell string array of mnemonics to compute the ',...
            'incidence matrix for'];
    case 'BadEqSpec'
        msg = ['In order to eliminate a set of endogenous variables ',...
            'from the RHS'' of a set of equations, this function ',...
            'requires that those endogenous variables be uniquely ',...
            'identified on the LHS of the equations. MAPS'' index ',...
            'lookup function returned the following error'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end


%% EXTRACT EXPRESSIONS FROM EQUATIONS
function msg = get_extract_expressions_from_equations_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['extract_expressions_from_equations was not passed ',...
            'the right number of inputs: it requires 1 input, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'extract_expressions_from_equations must be an equation ',...
            'string or column cell array of equation strings'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% EXTRACT INDEX NUMBERS FROM INCIDENCE MATRIX
function msg = get_extract_index_numbers_from_incidence_matrix_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['extract_index_numbers_from_incidence_matrix was not ',...
            'passed the right number of inputs: it requires 1 input, ',...
            'but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'extract_index_numbers_from_incidence_matrix must be a ',...
            'two-dimensional logical equation incidence matrix'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% EXTRACT LHS EXPRESSIONS FROM EQUATIONS
function msg = get_extract_LHS_expressions_from_equations_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['extract_LHS_expressions_from_equations was not ',...
            'passed the right number of inputs: it requires 1 input, ',...
            'but received ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end


%% EXTRACT RHS EXPRESSIONS FROM EQUATIONS
function msg = get_extract_RHS_expressions_from_equations_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['extract_RHS_expressions_from_equations was not ',...
            'passed the right number of inputs: it requires 1 input, ',...
            'but received ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end


%% FIND LAG ORDER
function msg = get_find_lag_order_error(errCode,errArgs)                    %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['find_lag_order was not passed the '...
            'right number of inputs: it requires 2 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'find_lag_order must be a column cell ',...
            'array of equation strings'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'find_lag_order must be a column cell ',...
            'string array of variable mnemonics.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% FIND REPEATED STRINGS
function msg = get_find_repeated_strings_error(errCode,errArgs)             %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['find_repeated_strings was not passed the right number ',...
            'of inputs: it requires 1 or 2 input, but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to find_repeated_strings must be a ',...
            'cell string array'];
    case 'BadInput2'
        msg = ['Optional 2nd input passed to find_repeated_strings ',...
            'must be a logical scalar describing whether or not the ',...
            'search is case insensistive (default is case sensitive)'];
    case 'BadInput3'
        msg = ['Optional 3rd input passed to find_repeated_strings ',...
            'must be a logical scalar describing whether or not the ',...
            'search should exclude empty strings (default is that ',...
            'they are included)'];        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% FIND INDEX NUMBERS OF OBSERVABLES IN MODEL VAR SPACE
function msg = ...
    get_find_index_numbers_of_observables_in_model_var_space_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['find_index_numbers_of_observables_in_model_var_space ',...
            'was not passed the right number of inputs: it requires 1 ',...
            'input, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'find_index_numbers_of_observables_in_model_var_space ',...
            'must be a MAPS linear state space model structure'];
    case 'BadModelClass'
        msg = ['MAPS model input to ',...
            'find_index_numbers_of_observables_in_model_var_space ',...
            'must be of the linear state space model class'];
    case 'BadModelCharacteristics'
        msg = ['The linear state space MAPS model input to ',...
            'find_index_numbers_of_observables_in_model_var_space ',...
            'must contain measurement equations'];
    case 'NonUniqueMapping'
        msg = ['MAPS could not compute the index numbers of the ',...
            'linear state space model observables in model variable ',...
            'space because there is a non-unique mapping in the ',...
            'measurement equation loadings'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% FIND INDEX NUMBERS OF RAW OBSERVABLES IN MODEL SPACE
function msg = ...
    get_find_index_numbers_of_raw_observables_in_model_space_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['find_index_numbers_of_raw_observables_in_model_space ',...
            'was not passed the right number of inputs: it requires 1 ',...
            'input, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'find_index_numbers_of_raw_observables_in_model_space ',...
            'must be a MAPS linear state space model structure'];
    case 'BadModelClass'
        msg = ['MAPS model input to ',...
            'find_index_numbers_of_raw_observables_in_model_space ',...
            'must be of the linear state space model class'];
    case 'BadModelCharacteristics'
        msg = ['The linear state space MAPS model input to ',...
            'find_index_numbers_of_raw_observables_in_model_space ',...
            'must contain data transformation equations'];
    case 'NonUniqueMapping'
        msg = ['MAPS could not compute the index numbers of the ',...
            'linear state space model raw observables in model ',...
            'observable space because there is a non-unique mapping ',...
            'in the data transformation equations'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% FIND VAR LAG INFO
function msg = get_find_var_lag_info_error(errCode,errArgs)                 %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['find_var_lag_info was not passed the '...
            'right number of inputs: it requires 3 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'find_var_lag_info must be a column cell ',...
            'array variable mnemonics.'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'find_var_lag_info must be a column cell ',...
            'string array containing the unique terms appearing in ',...
            'a set of equations. The variable mnemonics should not ',...
            'include time subscripts.'];
    case 'BadInput3'
        msg = ['3nd input passed to ',...
            'find_var_lag_info must be a column cell ',...
            'string array containing the unique terms appearing in a ',...
            'set of equations. The variable mnemonics should ',...
            'include time subscripts.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

 
%% GENERATE MAPS EXCEPTION ADD AS CAUSE AND THROW
function msg = get_generate_MAPS_exception_add_as_cause_and_throw_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['generate_MAPS_exception_add_as_cause_and_throw was ',...
            'not passed the right number of inputs: it requires ',...
            'either 2 or 3 inputs (depending on if optional error ',...
            'message arguments are passed in), but only received ',...
            errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% GENERATE MAPS EXCEPTION ADD CAUSE AND THROW
function msg = get_generate_MAPS_exception_add_cause_and_throw_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['generate_MAPS_exception_add_cause_and_throw was not ',...
            'passed the right number of inputs: it requires either 2 ',...
            'or 3 inputs (depending on if optional error message ',...
            'arguments are passed in), but only received ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% GENERATE MAPS EXCEPTION AND ADD AS CAUSE
function msg = get_generate_MAPS_exception_and_add_as_cause_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['generate_MAPS_exception_and_add_as_cause was not ',...
            'passed the right number of inputs: it requires either 2 ',...
            'or 3 inputs (depending on if optional error message ',...
            'arguments are passed in), but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'generate_MAPS_exception_and_add_as_cause must be a ',...
            'MATLAB exception object'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% GENERATE MAPS EXCEPTION AND ADD CAUSE
function msg = get_generate_MAPS_exception_and_add_cause_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['generate_MAPS_exception_and_add_cause was not passed ',...
            'the right number of inputs: it requires either 2 or 3 ',...
            'inputs (depending on if optional error message arguments ',...
            'are passed in), but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'generate_MAPS_exception_and_add_cause must be a MATLAB ',...
            'exception object'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end


%% GET JOB MANAGER OBJECT
function msg = get_get_job_manager_object_error(errCode,errArgs)            %#ok<DEFNU>
switch errCode
    case 'UnableToLocateJobManagerProfile'
        msg = ['MAPS was unable to load the job manager profile from ',...
            '''',errArgs{1},''', but was unable to do so. Note that ',...
            'it is intended that the ''get_job_manager_object'' ',...
            'function be used alongside the rest of inner MAPS.  On ',...
            'attempting to import the above profile, MATLAB ',...
            'returned the following error:'];    
    case 'UnableToLocateJobManager'
        msg = ['MAPS was unable to locate the job manager object. ',...
            'There are five possible reasons for that (in decreasing ',...
            'order of likelihood): a) the job manager profile that ',...
            'has been loaded in is incorrect; b) you do not have a ',...
            'license to use the MATLAB distributed computing toolbox; ',...
            'c) the server or distributed computing service down; ',...
            'd) you are not using the right version of MATLAB (you ',...
            'must use the same version as running the DCT service); ',...
            'e) the job manager object name or URL address has been ',...
            'changed'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end


%% IS MEMBER FOR ARRAY OF ROW STRING ARRAYS
function msg = get_is_member_for_array_of_row_string_arrays_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['is_member_for_array_of_row_string_arrays ',...
            'was not passed the right number of inputs: it requires ',...
            '2 inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'is_member_for_array_of_row_string_arrays must ',...
            'be a two-dimensional cell string array (i.e. an array of ',...
            'row string arrays) in which to look for rows ',...
            '(i.e. a reference array)'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'is_member_for_array_of_row_string_arrays must ',...
            'be a two-dimensional cell string array (i.e. an array of ',...
            'row string arrays) which are to be ',...
            'looked-up in the reference set (i.e. a lookup array)'];
    case 'IncompatibleRefAndLookupArrays'
        msg = ['The reference array of row string arrays and the ',...
            'lookup array of row string arrays must have the same ',...
            'number of columns for the row lookup to be valid'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% IS NUMERIC AND IN RANGE
function msg = get_is_numeric_and_in_range_error(errCode,~) %#ok<DEFNU>
switch errCode
    case 'BadInput2'
        msg = ['2nd input received by is_numeric_and_in_range'...
            ' must be a real-valued scalar.'];
    case 'BadInput3'
        msg = ['3rd input received by is_numeric_and_in_range'...
            ' must be a real-valued scalar.'];
    case 'BadInput4'
        msg = ['4th input received by is_numeric_and_in_range'...
            ' must be a logical scalar indicating whether or not'...
            ' values exactly equal to the bounds are valid or not.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end


%% LOAD MAT FILE AS STRCUTURE
function msg = get_load_mat_file_as_structure_error(errCode,errArgs)        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['load_mat_file_as_structure was not passed the right ',...
            'number of inputs: it requires 1 input, but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to load_mat_file_as_structure must ',...
            'be a string representing the .mat file name'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end



%% LOAD VARIABLES FROM MAT FILE
function msg = get_load_variables_from_mat_file_error(errCode,errArgs)      %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['load_variables_from_mat_file was not passed the right ',...
            'number of inputs: it requires at least 2 input, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to load_variables_from_mat_file must ',...
            'be a string representing the .mat file name'];
    case 'BadInput2'
        msg = ['2nd and further inputs passed to ',...
            'load_variables_from_mat_file must be a strings ',...
            'representing the names of variables to be extracted from ',...
            'the .mat file'];  
    case 'BadNarginNargout'
        msg = ['The number of variables requested to be extracted ',...
            'from the .mat file (the 2nd input and onwards) must ',...
            'equal the number of variables requested as output arguments'];
    case 'MissingVariables'
        msg = ['The following variables requested to be extracted ',...
            'from the .mat file did not exist among its contents - ',...
            'please check the content and format of the .mat file'];  
    case 'MissingVariables:Instance'
        msg = errArgs{1};
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% LOOKUP INDEX NUMBERS IN ARRAY OF ROW STRING ARRAYS
function msg = ...
    get_lookup_index_numbers_in_array_of_row_string_arrays_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['lookup_index_numbers_in_array_of_row_string_arrays ',...
            'was not passed the right number of inputs: it requires ',...
            '2 or 3 inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'lookup_index_numbers_in_array_of_row_string_arrays must ',...
            'be a two-dimensional cell string array (i.e. an array of ',...
            'row string arrays) in which to lookup index/row number ',...
            '(i.e. a reference array)'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'lookup_index_numbers_in_array_of_row_string_arrays must ',...
            'be a two-dimensional cell string array (i.e. an array of ',...
            'row string arrays) whose index/row number(s) are to be ',...
            'looked-up in the reference set (i.e. a lookup array)'];
    case 'BadInput3'
        msg = ['Optional 3rd input passed to ',...
            'lookup_index_numbers_in_array_of_row_string_arrays must ',...
            'be a logical scalar dictating whether the rows in the ',...
            'lookup string array must contain a unique set of strings ',...
            'or not (the default)']; 
    case 'IncompatibleRefAndLookupArrays'
        msg = ['The reference array of row string arrays and the ',...
            'lookup array of row string arrays must have the same ',...
            'number of columns for the row lookup to be valid'];
    case 'NonUniqueRefStrArrays'
        msg = ['The rows of strings in which to lookup index numbers ',...
            '(the reference array) must be unique (otherwise it is ',...
            'not possible to return single index numbers)'];
    case 'NonUniqueLookupStrArrays'
        msg = ['If the optional input flag is set to true then the ',...
            'rows in the array of lookup strings must be unique'];
    case 'UnknownLookupStrArrays'
        msg = ['It was not possible to lookup the index number(s) of ',...
            'the following rows of string(s) because they are not ',...
            'part of the reference array in which to lookup the index ',...
            'number(s):'];
    case 'UnknownLookupStrArrays:Instance'
        allStrsInRow = create_comma_separated_list(errArgs);
        msg = allStrsInRow;
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% LOOKUP INDEX NUMBERS IN STRING ARRAY
function msg = get_lookup_index_numbers_in_string_array_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['lookup_index_numbers_in_string_array was not passed ',...
            'the right number of inputs: it requires 2 or 3 inputs, ',...
            'but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'lookup_index_numbers_in_string_array must be a column ',...
            'cell string array of strings in which to lookup index ',...
            'numbers (i.e. a reference array)'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'lookup_index_numbers_in_string_array must be a column ',...
            'cell string array or string whose index number(s) is ',...
            '(are) to be looked-up in the reference set (i.e. a ',...
            'lookup array)'];
    case 'BadInput3'
        msg = ['Optional 3rd input passed to ',...
            'lookup_index_numbers_in_string_array must be a logical ',...
            'scalar dictating whether the lookup string array must ',...
            'contain a unique set of strings or not (the default)'];        
    case 'NonUniqueRefStrs'
        msg = ['The strings in which to lookup index numbers (the ',...
            'reference array) must be unique (otherwise it is not ',...
            'possible to return single index numbers)'];
    case 'NonUniqueLookupStrs'
        msg = ['The array of lookup strings must be unique (given ',...
            'that the optional input flag that determines a ',...
            'requirement for this was set to true)'];
    case 'UnknownLookupStrs'
        msg = ['It was not possible to lookup the index number(s) of ',...
            'the following string(s) because they are not part of the ',...
            'reference set:'];
    case 'UnknownLookupStrs:Instance'
        msg = errArgs{1};
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% LOOKUP STRING ARRAY IN ROW STRING ARRAYS
function msg = get_lookup_string_array_in_row_string_arrays_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['lookup_string_array_in_row_string_arrays was not passed ',...
            'the right number of inputs: it requires 2 inputs, ',...
            'but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'lookup_string_array_in_row_string_arrays must be a two-dimensional ',...
            'cell string array of strings in which to lookup index ',...
            'numbers (i.e. a reference array)'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'lookup_string_array_in_row_string_arrays must be a row ',...
            'cell string array to be looked-up in the reference set (i.e. a ',...
            'lookup array)'];
    case 'IncompatibleRefAndLookupArrays'
        msg = ['The reference array of row string arrays and the ',...
            'lookup row string array must have the same ',...
            'number of columns for the row lookup to be valid'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end    



%% LOOKUP MODEL INDEX NUMBERS
function msg = get_lookup_model_index_numbers_error(errCode,errArgs)        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['lookup_model_index_numbers was not passed the right ',...
            'number of inputs: it requires 2 inputs, but only ',...
            'received ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end




%% MODEL EQUATION DECOMPOSITION
function msg = get_model_equation_decomposition_error(errCode,errArgs)      %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['Number of inputs ',...
            'received by model_equation_decomposition is not ',...
            'right: we expected 7 or 8 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by ',...
            'model_equation_decomposition is not as expected: ',...
            'it must be a structure representing a MAPS model'];
    case 'BadInput2'
        msg = ['2nd input received by ',...
            'model_equation_decomposition is not as expected: ',...
            ' it must be a string containing the name of the',...
            ' variable to decompose'];
    case 'BadInput3'
        msg = ['3nd input received by ',...
            'model_equation_decomposition is not as expected: ',...
            ' it must be a string containing the name of the ',...
            'equation wrt to which we decompose'];
    case 'BadInput4'
        msg = ['4th input received by ',...
            'model_equation_decomposition is not as expected: ',...
            '  it must be a numeric and finite column vector ',...
            'representing the smoothed estimates of the model variables'];
    case 'BadInput5'
        msg = ['5th input received by ',...
            'model_equation_decomposition is not as expected: ',...
            ' it must be a numeric and finite column vector ',...
            'representing the forecast for the model variables'];
    case 'BadInput6'
        msg = ['6th input received by ',...
            'model_equation_decomposition is not as expected: ',...
            ' it must be a numeric and finite column vector ',...
            'representing the estimates of the shock over the past'];
    case 'BadInput7'
        msg = ['7th input received by ',...
            'model_equation_decomposition is not as expected: ',...
            ' it must be a structure describing the shocks over the ',...
            'forecast'];
    case 'BadInput8'
        msg = ['8th input passed to measurement_equation_decomposition',...
            ' must be a matrix with finite numeric entries'];
    case 'ValidateDecompositionInputs'
        msg = ['The variable/equation pair for the decomposition',...
            ' are incompatible: the following exceptions were found'];
    case 'ValidateDecompositionInputs:VariableDoesNotExist'
        msg = ['The name of the variable to decompose does not ',...
            'correspond to the model variable mnemonics: ',errArgs{1}];
    case 'ValidateDecompositionInputs:EquationDoesNotExist'
        msg = ['The name of the equation wrt which you want to ',...
            'decompose does not correspond any of the model ',...
            'equations: ',errArgs{1}];
    case 'ValidateDecompositionInputs:BadVariableEquationPair'
        msg = ['The variable (',errArgs{1},') and the equation ('...
            ,errArgs{2},') you choose for the ',...
            'decomposition are incompatible'];
    case 'BadShockFields'
        msg = ['The shocks structure should have fields '...
            '.anticipated and/or .unanticipated'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% MODIFY MODEL FROM FILE
function msg = get_modify_model_from_file_error...
    (errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['modify_model_from_file was not'...
            ' passed the right number of inputs: it requires 2 but '...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by modify_model_from_file'...
            ' must be a string representing'...
            ' the name of the MAPS text file to be modified.'];
    case 'BadInput2'
        msg = ['2nd input received by modify_model_from_file'...
            ' must be a string representing'...
            ' the name of the modification info file.'];
    case 'BadInput3'
        msg = ['3rd input received by modify_model_from_file'...
            ' must be a string representing'...
            ' a name for the new modified model text file.'];
    case 'BadNewModelName'
        msg = ['3rd input received by modify_model_from_file'...
            ', the name of the new modified model'...
            ' must be different from the name of the original model,'...
            ' the 1st input.'];
    case 'NLBLmodelError'
        msg = ['Only Linear State Space models can be modified using '...
            'the model modifier. The model provided was not LSS.'];
    case 'OldModelCreationError'
        msg = ['MAPS could not create the model which you requested to '...
            'modify for the following reasons:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% MODIFY MODEL FROM STRUCT
function msg = get_modify_model_from_struct_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['modify_model_from_struct was not passed the right number'...
            ' of inputs: it requires 2 but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by modify_model_from_struct must be'...
            ' a MAPS model structure to be modified.'];
    case 'BadInput2'
        msg = ['2nd input received by modify_model_from_struct must be a '...
            'string representing the name of the modification info file.'];
    case 'BadInput3'
        msg = ['3rd input received by modify_model_from_struct most be '...
            'a string representing the name of the MAPS file for the '...
            'modified model.'];
    case 'ModifiedModelValidationError'
        msg = ['When MAPS tried to create the new model with your '...
            ' requested modifications it found the following errors:'];       
    otherwise
        throw_missing_error_code_error(errCode);
end
end


%% OVERLAY DEFAULT STRUCTURE
function msg = get_overlay_default_structure_error(errCode,errArgs)         %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['overlay_default_structure was not passed the right ',...
            'number of inputs: it requires 2 inputs, but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by overlay_default_structure must ',...
            'be a structure to overlay on to the defaults structure'];
    case 'BadInput2'
        msg = ['2nd input received by overlay_default_structure must ',...
            'be a structure of defaults'];
    case 'InvalidFields'
        msg = ['The structure of options passed in contained the ',...
            'following invalid option fields'];
    case 'InvalidFields:Instance'
        msg = ['''',errArgs{1},''''];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% OVERLAY ONE INCOMPLETE DATASET ON TO ANOTHER
function msg = get_overlay_one_incomplete_dataset_on_to_another_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['overlay_one_incomplete_dataset_on_to_another was not ',...
            'passed the right number of inputs: it requires 4 inputs, ',...
            'but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'overlay_one_incomplete_dataset_on_to_another ',...
            'representing the first model dataset must be a real, two-',...
            'dimensional matrix with no infinite values'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'overlay_one_incomplete_dataset_on_to_another ',...
            'must be column cell string array or column vector of ',...
            'index numbers representing the model metadata for the ',...
            'first dataset input'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'overlay_one_incomplete_dataset_on_to_another ',...
            'representing the second model dataset must be a real, ',...
            'two-dimensional matrix with no infinite values'];
    case 'BadInput4'
        msg = ['4th input passed to ',...
            'overlay_one_incomplete_dataset_on_to_another ',...
            'must be column cell string array or column vector of ',...
            'index numbers representing the model metadata for the ',...
            'second dataset input'];
    case 'Dataset1DimsInconsistentWithDataset2'
        msg = ['The number of columns (indexing time periods) in the ',...
            'first dataset was not consistent with the number of ',...
            'columns in the second dataset'];
    case 'Metadata1DimsInconsistentWithData1'
        msg = ['The number of rows (indexing variables) in the first ',...
            'dataset was not consistent with the number of rows in ',...
            'the model metadata for the first dataset'];
    case 'Metadata2DimsInconsistentWithData2'
        msg = ['The number of rows (indexing variables) in the second ',...
            'dataset was not consistent with the number of rows in ',...
            'the model metadata for the second dataset'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% OVERLAY STRUCTURE
function msg = get_overlay_structure_error(errCode,errArgs)         %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['overlay_structure was not passed the right number of ',...
            'inputs: it requires 2 inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by overlay_structure must be a ',...
            'structure to overlay on to the reference structure'];
    case 'BadInput2'
        msg = ['2nd input received by overlay_structure must be a ',...
            'reference structure on which to do the overlay'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end



%% PACK MODEL
function msg = get_pack_model_error(errCode,errArgs)                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['pack_model was not passed the right number of inputs: ',...
            'it requires 3 inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to pack_model must be a MAPS model ',...
            'structure which must have a ''Constructor'' field'];
    case 'BadInput2'
        msg = ['2nd input passed to pack_model must be a vector ',...
            'cell string array of model component identifiers'];
    case 'BadInput3'
        msg = ['3rd input passed to pack_model must be a vector ',...
            'cell string array of data to pack into the model'];
    case 'InconsistentIdentifierDataDims'
        msg = ['The number of identifiers passed in (identifying ',...
            'model components to pack) must equal the number of data ',...
            'components passed in (to pack into the model)'];
    case 'PackFailure'
        msg = 'MAPS was unable to pack the following model component(s):';
    case 'PackFailure:NonExistentID'
        msg = ['The identifier ''',errArgs{1},''' could not be found ',...
            'among the list of valid MAPS model component identifiers ',...
            'in the model input'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% PARSE DECOMP ADD ON
function msg = get_parse_decomp_add_on_error(errCode,errArgs)               %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['parse_decomp_add_on was not passed the right number ',...
            'of inputs: it requires 2 inputs but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to parse_decomp_add_on must be a ',...
            'MAPS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to parse_decomp_add_on must be a ',...
            'full path file name string to the decomposition add on file'];
    case 'BadModelClass'
        msg = ['Model input passed to parse_decomp_add_on must be of ',...
            'the linear state space class'];
    case 'AddOnFileSyntaxErrors'
        msg = ['MAPS was unable to parse the decomposition add-on ',...
            'information in ''',errArgs{1},''' due to the following ',...
            'add-on file syntax exceptions:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end



%% PARSE LSS MODEL
function msg = get_parse_LSS_model_error(errCode,errArgs)                   %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['parse_LSS_model was not passed the right mumber of ',...
            'inputs: it requires 1 input, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to parse_LSS_model must be a string ',...
            'representing the full path file name for a MAPS linear ',...
            'state space model'];
    case 'ModelFileSyntaxErrors'
        msg = ['MAPS was unable to parse the model in ''',errArgs{1},...
            ''' due to the following model file syntax exceptions:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end


%% PARSE MAPS MODEL TEXT INFO
function msg = get_parse_MAPS_model_text_info_error(errCode,errArgs)        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['parse_MAPS_model_text_info was not passed the right ',...
            'number of inputs: it requires 2 inputs, but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to parse_MAPS_model_text_info ',...
            'must be a four column cell array containing information ',...
            'about the format of the MAPS model file'];
    case 'BadInput2'
        msg = ['2nd input passed to parse_MAPS_model_text_info ',...
            'must be a string representing the full path file name ',...
            'for MAPS model'];
    case 'FileFormatError'
        msg = ['MAPS was unable to parse the model owing to the ',...
            'following file format syntax errors:'];
    case 'FileFormatError:RepeatedKeyword'
        msg = ['MAPS found more than one instance of model file ',...
            'keyword ''',errArgs{1},''' on lines: ',errArgs{2}];
    case 'FileFormatError:MissingKeyword'
        msg = ['MAPS was unable to find compulsory model file ',...
            'keyword ''',errArgs{1},''''];
    case 'FileFormatError:MissingInfo'
        msg = ['MAPS could not find any information under ',...
            'compulsory model file key word: ''',errArgs{1},''''];
    case 'FileFormatError:BadlyFormattedInfo'
        msg = ['Information under ''',errArgs{1},''' must be ',...
            'formatted in the following way: ''',errArgs{2},''''];
    case 'BadLines'
        msg = ['The following lines under the model field ID were ',...
            'not formatted correctly: ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% PCT
function msg = get_pct_error(errCode,~)                                     %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['pct was not passed the right number of inputs: it '...
            'requires 1 but did not receive any'];
    case 'BadInput1'
        msg = ['1st input received by pct must be a real numeric ',...
            'two-dimensional matrix of time series data'];
    case 'ContainsZeros'
        msg = ['It is not possible to calculate percentage changes ',...
            'for at least one of the time series input because it/',...
            'they have zero values in one or more periods'];
    case 'TooShort'
        msg = ['It is not possible to compute percentage changes for ',...
            'the time series input because they contained fewer than ',...
            '2 data points (as measured by number of columns)'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end


%% PRE PARSE MODEL
function msg = get_pre_parse_model_error(errCode,errArgs)                   %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['pre_parse_model was not passed the right number of ',...
            'inputs: it requires 1 input, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to pre_parse_model must be a string ',...
            'representing the full path file name for a MAPS model'];
    case 'BadModelFile'
        msg = ['You have tried to parse a model. The model must be ',...
            'either linear state space (LSS) or non-linear backward-',...
            'looking (NLBL): the model in ''',errArgs{1},''' is not ',...
            'a valid LSS or NLBL model'];
    case 'UncategorisableModelFile'
        msg = ['You have tried to parse a model. The model must be ',...
            'either linear state space (LSS) or non-linear backward-',...
            'looking (NLBL): the model in ''',errArgs{1},''' could ',...
            'not be categorised as either LSS or NLBL'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end



%% REARRANGE EQUATION
function msg = get_rearrange_equation_error(errCode,errArgs)                %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['rearrange_equation was not passed the right number of ',...
            'inputs: it requires 2 inputs, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by rearrange_equation must be a ',...
            'string representing an equation'];
    case 'BadInput2'
        msg = ['2nd input received by rearrange_equation must be a ',...
            'string representing a variable on which to normalise ',...
            'the equation'];
    case 'InvalidEquation'
        msg = ['The equation to rearrange ''',errArgs{1},''' is not ',...
            'a valid equation in MAPS - MAPS'' equation string ',...
            'checker returned the following error(s):'];
    case 'WrongVarToNormOn'
        msg = ['The equation to rearrange must contain one and ',...
            'only one instance of the variable to normalise on. The ',...
            'input equation ''',errArgs{1},''' contains ',errArgs{2},...
            ' instances of the variable to normalise on ''',...
            errArgs{3},''''];
    case 'BadEqRearrangement'
        msg = ['MAPS'' symbolic equation rearranger function failed - ',...
            'as part of the rearrangement algorithm, it was unable to ',...
            'rearrange ''',errArgs{1},''' to normalise on ''',...
            errArgs{2},''''];
    otherwise
        throw_missing_error_code_error(errCode);
end
end


%% RECONSTRUCT EQUATION
function msg = get_reconstruct_equation_error(errCode,errArgs)                %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['reconstruct_equation was not passed the right number ',...
            'of inputs: it requires 2 or 3 inputs, but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by reconstruct_equation must be a ',...
            'row cell string array of equation terms'];
    case 'BadInput2'
        msg = ['2nd input received by reconstruct_equation must be a ',...
            'row cell string array of equation delimiters'];
    case 'InconsistentTermsDelimsSizes'
        msg = ['The row cell string array of equation delimiters ',...
            'passed in as 2nd input must have 1 fewer elements than ',...
            'the row cell string array of terms passed in as 1st input'];
    case 'BadInput3'
        msg = ['Optional 3rd input received by reconstruct_equation ',...
            'must be a row cell string array of time subscripts ',...
            'associated with each of the terms'];
    case 'InconsistentTermsTimeSubsSizes'
        msg = ['The row cell string array of time subscripts passed ',...
            'in as 3rd input must have the same number of elements as ',...
            'the row cell string array of terms passed in as 1st input'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% REORDER EQUATIONS
function msg = get_reorder_equations_error(errCode,errArgs)                 %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['reorder_equations was not passed the right number ',...
            'of inputs: it requires 2 inputs, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to reorder_equations must be a ',...
            'column cell array of equation strings'];
    case 'BadInput2'
        msg = ['2nd input passed to reorder_equations must be a ',...
            'column cell string array of mnemonics to compute the ',...
            'incidence matrix for'];
    case 'BadEqSpec'
        msg = ['In order to reorder a set of equations, this function ',...
            'requires that the endogenous variables to reorder by be ',...
            'uniquely identified on the LHS of the equations. MAPS'' ',...
            'index lookup function returned the following error'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% REORDERING OPERATOR
function msg = get_reordering_operator_error(errCode,errArgs)               %#ok<INUSD,DEFNU>
switch errCode
    case 'InfeasibleInversion'
        msg = 'The selected inversion(s) is(are) not feasible';
    case 'ValidityOutput'
        msg = 'The Reordering Operators are not properly defined';
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% REPLACE TIME SUBSCRIPTS IN EQUATIONS
function msg = get_replace_time_subscripts_in_equations_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['replace_time_subscripts_in_equations was not passed ',...
            'the right number of inputs: it requires 2 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'replace_time_subscripts_in_equations must be a column ',...
            'cell array of equation strings'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% SAVE CONTENT OF STRUCTURE TO MAT FILE
function msg = get_save_content_of_structure_to_mat_file_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['save_content_of_structure_to_mat_file was not passed ',...
            'the right number of inputs: it requires 2 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'save_content_of_structure_to_mat_file must be a string ',...
            'representing the .mat file name'];        
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'save_content_of_structure_to_mat_file must be a ',...
            'structure whose contents to save out'];
    case 'BadFileName'
        msg = ['MAPS cannot save the contents of the structure to mat ',...
            'file because the file name input ''',errArgs{1},''' is ',...
            'not a valid file name - MAPS'' file name checker ',...
            'returned the following exception:'];
    case 'UnableToSaveStruct'
        msg = ['MAPS cannot save the contents of the structure to the ',...
            'mat file name ''',errArgs{1},''' because the MATLAB ',...
            '''save'' function returned the following error(s):'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% SCAN MAPS TEXT FILE
function msg = get_scan_MAPS_text_file_error(errCode,errArgs)               %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['scan_MAPS_text_file was not passed the right number ',...
            'of inputs: it requires 1 input, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by scan_MAPS_text_file must be a ',...
            'string representing a .maps file to scan in'];
    case 'MissingFileNameAppendage'
        msg = 'File name passed in must have a ''.maps'' appendage';
    case 'UnknownFile'
        msg = ['The file corresponding to the file name passed in ',...
            'could not be found on the current MATLAB search path'];
    case 'FileOpenFailure'
        msg = ['It was not possible to open the .maps file. On ',...
            'attempting to open the file, MATLAB returned the ',...
            'following error message:'];
    case 'FileCloseFailure'
        msg = ['For some unknown reason, it was not possible to close ',...
            'the file after reading its content'];
    case 'EmptyScannedContent'
        msg = ['The scanned content of the .maps file appears as ',...
            'empty in MAPS. Please check the content and the format ',...
            'of the file against the requirements of the MATLAB ',...
            '''textscan'' function'];
    case 'UnexpectedScannedContent'
        msg = ['The scanned content of the .maps file does not appear ',...
            'as a column cell array in MAPS as expected. Please check ',...
            'the content and the format of the file against the ',...
            'requirements of the MATLAB ''textscan'' function'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end


%% SOLVE LSS MODEL
function msg = get_solve_LSS_model_error(errCode,errArgs)                               %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['solve_LSS_model was not passed the right number of',...
            'inputs: it requires 1 or 2 inputs but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to solve_LSS_model must be a ',...
            'MAPS linear state space model structure.'];
    case 'BadInput2'
        msg = ['Optional 2nd input passed to solve_LSS_model must be ',...
            'a column vector of finite, real, numeric parameters'];
    case 'BadCustomSolverModelField'
        msg = ['The MAPS model structure passed to solve_LSS_model ',...
            'contains a custom solver field (implying that the model ',...
            'should be solved in a bespoke way), but its content is ',...
            'not a function handle as expected'];
    case 'CustomSolveE'
        msg = ['The custom solver ''',errArgs{1},''' failed with ',...
            'the following error message:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% SOLVE LSS MODEL RE DYNAMICS
function msg = get_solve_LSS_model_RE_dynamics_error(errCode,errArgs)       %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['solve_LSS_model_RE_dynamics was not passed the ',...
            'right number of inputs: it requires 4 inputs but ',...
            'received ',errArgs{1}];
    case 'NoContemporaneousVars'
        msg = ['The model passed to solve_LSS_model_RE_dynamics is ',...
            'not valid because it contains no loadings on ',...
            'contemporaneously-dated model variables'];
    case 'AIMunstableSolution'
        msg = ['The rational expectations solution to the model ',...
            'passed to solve_LSS_model_RE_dynamics could not be ',...
            'solved using the AIM algorithm'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% SOLVE LSS MODEL STEADY STATE
function msg = get_solve_LSS_model_steady_state_error(errCode,errArgs)       %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['solve_LSS_model_steady_state was not passed the ',...
            'right number of inputs: it requires 2 inputs but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to solve_LSS_model_steady_state ',...
            'must be a function handle containing steady state & ',...
            'parameter transformation expressions'];
    case 'BadInput2'
        msg = ['2nd input passed to solve_LSS_model_steady_state ',...
            'must be a column vector of finite real numeric parameters'];
    case 'SteadyStateEvalFailure'
        msg = ['It was not possible to evaluate the steady state ',...
            '& parameter transformation expressions. In attempting to ',...
            'evaluate the steady state expressions, MATLAB returned ',...
            'the following error:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% SOLVE RECURSIVE SYSTEM OF EQUATIONS
function msg = get_solve_recursive_system_of_equations_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['solve_recursive_system_of_equations was not passed ',...
            'the right number of inputs: it requires 2 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'solve_recursive_system_of_equations must be a column ',...
            'cell array of equation strings'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'solve_recursive_system_of_equations must be a column ',...
            'cell string array of mnemonics of endogenous variables ',...
            'to solve for'];
    case 'BadEqSpec'
        msg = ['In order to reorder a set of equations, this function ',...
            'requires that the endogenous variables to reorder by be ',...
            'uniquely identified on the LHS of the equations. MAPS'' ',...
            'index lookup function returned the following error'];
    case 'NonRecursiveEqSystem'
        msg = ['The system of equations is not recursive. The ',...
            'following equations constitute a non-recursive block:'];
    case 'NonRecursiveEqSystem:Instance'
        msg = errArgs{1};
    otherwise
        throw_missing_error_code_error(errCode);
end
end


%% SPLIT EQUATION
function msg = get_split_equation_error(errCode,errArgs)                    %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['split_equation was not passed the right number of ',....
            'inputs: it requires 1 or 2 inputs, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to split_equation must be an ',...
            'equation string'];
    case 'BadInput2'
        msg = ['Optional 2nd input passed to split_equation must be a ',...
            'structure of execution options for the equation split ',...
            'operation'];
    case 'BadOptionFieldName'
        msg = ['The ''',errArgs{1},''' field in the split equations ',...
            'options structure is not a recognised option field - ',...
            'please check your input'];
    case 'BadOptionField'
        msg = ['Fields in the split equation options structure must ',...
            'contain true/false logicals describing whether or not a ',...
            'particular split equation option should be carried out ',...
            'or not. The ''',errArgs{1},''' field contains an invalid ',...
            'data type'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% SPLIT EQUATION SYSTEM STRINGS
function msg = get_split_equation_system_strings_error(errCode,errArgs)                    %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['split_equation_system_strings was not passed the right number of ',....
            'inputs: it requires 1 input, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to split_equation must be a column ',...
            'cell array of equation strings'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% SPLIT FILE NAME INTO CONSTITUENT PARTS
function msg = get_split_file_name_into_consituent_parts_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['split_file_name_into_consituent_parts was not passed ',...
            'the right number of inputs: it requires 1 input, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'split_file_name_into_consituent_parts must be a string ',...
            'representing a file name'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% TEST_MAPS
function msg = get_test_MAPS_error(errCode,errArgs)                         %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['test_MAPS was not passed the right number of inputs: ',...
            'it requires at least 2 inputs, but only received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to test_MAPS must be a string ',...
            'directory for ''inner'' MAPS'];
    case 'BadInput2'
        msg = ['2nd input passed to test_MAPS must be a string ',...
            'representing a file name in which to print out the test ',...
            'results'];
    case 'BadInput3'
        msg = ['Optional 3rd input passed to test_MAPS must be a ',...
            'logical scalar indicating whether or not to run profiler ',...
            'with the tests']; 
    case 'BadInput4'
        msg = ['Optional 4th input passed to test_MAPS must be a row ',...
            'cell array of strings representing the names of tests to ',...
            'run or not to run as dictated by the 5th input passed in']; 
    case 'BadInput5'
        msg = ['Optional 5th input passed to test_MAPS must be a ',...
            'logical scalara dictating whether the list of test names ',...
            'passed in as 4th input represents a list of tests to run ',...
            'or a list of tests not to run'];         
    case 'BadOutputNargProfileInput'
        msg = ['If test_MAPS is called with just 2 input arguments or ',...
            'the 3rd ''runProfiler'' input is set to false, then only ',...
            'one output argument should be specified in the function ',...
            'call (because it is necessary to run the profiler in ',...
            'order to gather the test execution statistics which ',...
            'constitute the 2nd output argument'];
    case 'InvalidResultsFileNameExtension'
        msg = ['The results file name passed in as 2nd input had an ',...
            'extension, but it was not a ''.maps'' extension - either ',...
            'change the extension to ''.maps'' or do not specify one'];
    case 'NoMatFilesInTestDirectory'
        msg = ['There were no ''.mat'' test files in the test ',...
            'directory ''',errArgs{1},'''. Please check the ',...
            'innerMAPSdir string passed in as input and the content ',...
            'of this directory - it''s possible you may a typo in ',...
            'providing the inner MAPS directory name or that the ',...
            'inner MAPS directory does not mirror the VSS directory ',...
            'or that the test directory is empty'];
    case 'UnknownTests'
        msg = ['The following test names (passed in as 4th input etc) ',...
            'could not be found among the set loaded from the test ',...
            'directory:'];
    case 'UnknownTests:Instance'
        msg = errArgs{1};
    case 'UnableToExecuteTestCases'
        msg = ['It is not possible to execute one or more of the ',...
            'automated tests:'];
    case 'UnableToFindFunction'
        msg = ['The following functions (implied by the regression ',...
            'test data .mat files found in the test directory) ',...
            'could not be found on the MATLAB search path:'];
        case 'UnableToFindFunction:Instance'    
            msg = errArgs{1};
    case 'UnableToFindClass'
        msg = ['The following classes (implied by the text ',...
            'appearing between the square brackets in the test data ',...
            '.mat files found in the test directory) could not be ',...
            'found on the MATLAB search path:'];
        case 'UnableToFindClass:Instance'    
            msg = errArgs{1};     
    case 'UnableToFindMethodOnClass'
        msg = ['The following methods (implied by the text ',...
            'appearing after the square brackets in the test data ',...
            '.mat files found in the test directory) could not be ',...
            'found in the associated class:'];
    case 'UnableToFindMethodOnClass:Instance'
            msg = [errArgs{1} 'on class ',errArgs{2}];              
    case 'FileOpenFailure'
        msg = ['It was not possible to open ',errArgs{1},' to print ',...
            'out the automated test results. On attempting to open ',...
            'the file, MATLAB returned the following error: ',errArgs{2}];
    case 'FileCloseFailure'
        msg = ['For some unspecified reason, it was not possible to ',...
            'close the automated test results file - ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% TEXT COMPONENT
function msg = get_TextComponent_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
case 'BadConstructNargin'
    msg = ['The constructor method for TextComponent requires one input '...
        'but only received ',errArgs{1}];
    case 'BadConstructInput1'
    msg = ['The first input passed to the constructor method for '...
        'TextComponent must be a string containing the text to include.'];
    case 'AddToBadNargin'
        msg = ['The AddTo method in TextComponent requires one '...
            'input (beyond the Text Component object itself). It only '...
            'received ',errArgs{1}];
    case 'AddToBadInput1'
        msg = ['The first input passed to the AddTo method in the '...
            'TextComponent must be of the ReportBuilder class ('...
            'the report to which to add the text component).'];
    otherwise 
        throw_missing_error_code_error(errCode);
end
end

%% TIDY EQUATION
function msg = get_tidy_equation_error(errCode,errArgs)                     %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['tidy_equation was not passed the right number of ',...
            'inputs: it requires 1 input, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by tidy_equation must be a string ',...
            'representing an equation'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end


%% TRANSFORM INDICES FROM OBSERVABLE TO MODEL VAR SPACE
function msg = ...
    get_transform_indices_from_observable_to_model_var_space_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['transform_indices_from_observable_to_model_var_space ',...
            'was not passed the right number of inputs: it requires 2 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'transform_indices_from_observable_to_model_var_space ',...
            'must be a MAPS linear state space model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'transform_indices_from_observable_to_model_var_space ',...
            'must column vector of model observable indices'];
    case 'BadInds'
        msg = ['It was not possible to convert the model observable ',...
            'indices to model variable space because the input ',...
            'model observable indices could not be mapped into the ',...
            'complete set of transformed model observable indices. ',...
            'MATLAB returned the following error(s):'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% TRANSFORM INDICES FROM RAW TO MODEL OBSERVABLE SPACE
function msg = ...
    get_transform_indices_from_raw_to_model_observable_space_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['transform_indices_from_raw_to_model_observable_space ',...
            'was not passed the right number of inputs: it requires 2 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'transform_indices_from_raw_to_model_observable_space ',...
            'must be a MAPS linear state space model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'transform_indices_from_raw_to_model_observable_space ',...
            'must column vector of model raw observable indices'];
    case 'BadInds'
        msg = ['It was not possible to convert the raw observable ',...
            'indices to model observable space because the input ',...
            'raw observable indices could not be mapped into the ',...
            'transformed raw observable model indices. MATLAB ',...
            'returned the following error(s):'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% TRANSFORM OBSERVABLES FROM MODEL TO RAW SPACE
function msg = get_transform_observables_from_model_to_raw_space_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['transform_observables_from_model_to_raw_space was not ',...
            'passed the right number of inputs: it requires either ',...
            '3 or 5 inputs (depending on whether deterministic time ',...
            'trends form part of the model being used), but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'transform_observables_from_model_to_raw_space must be a ',...
            'data transformation function handle'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'transform_observables_from_model_to_raw_space must be a ',...
            'finite two-dimensional numeric matrix of model observables'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'transform_observables_from_model_to_raw_space must be a ',...
            'finite numeric column vector of initial conditions for ',...
            'the raw observables'];
    case 'BadInput4'
        msg = ['4th input passed to ',...
            'transform_observables_from_model_to_raw_space must be a ',...
            'finite two-dimensional numeric matrix of deterministic ',...
            'time-varying trends'];
    case 'BadInput5'
        msg = ['5th input passed to ',...
            'transform_observables_from_model_to_raw_space must be a ',...
            'finite numeric column vector of initial conditions for ',...
            'the deterministic time-varying trends'];
    case 'InconsistentObsDims'
        msg = ['The dimensions of the raw observables initial ',...
            'conditions and the model observable dataset are not ',...
            'consistent: they must have the same number of rows ',...
            '(representing the number of observables in the model)'];
    case 'InconsistentTimeTrendDims'
        msg = ['The dimensions of the deterministic time-varying ',...
            'trend initial conditions and dataset are not consistent: ',...
            'they must have the same number of rows (representing the ',...
            'number of separate deterministic time-varying trends in ',...
            'the model)'];
    case 'InconsistentRawObsTimeTrendDims'
        msg = ['The dimensions of the model observables dataset and ',...
            'the deterministic time-varying trends dataset are not ',...
            'consistent: they must have the same number of columns ',...
            '(representing the number of time periods of data)'];
    case 'FunHandleEvalFailure'
        msg = ['On evaluation of the data transformation function ',...
            'handle, MATLAB returned the following error:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% TRANSFORM OBSERVABLES FROM RAW TO MODEL SPACE
function msg = get_transform_observables_from_raw_to_model_space_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['transform_observables_from_raw_to_model_space was not ',...
            'passed the right number of inputs: it requires either ',...
            '3 or 5 inputs (depending on whether deterministic time ',...
            'trends form part of the model being used), but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'transform_observables_from_raw_to_model_space must be a ',...
            'data transformation function handle'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'transform_observables_from_raw_to_model_space must be a ',...
            'finite two-dimensional numeric matrix of raw observables'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'transform_observables_from_raw_to_model_space must be a ',...
            'finite numeric column vector of initial conditions for ',...
            'the raw observables'];
    case 'BadInput4'
        msg = ['4th input passed to ',...
            'transform_observables_from_raw_to_model_space must be a ',...
            'finite two-dimensional numeric matrix of deterministic ',...
            'time-varying trends'];
    case 'BadInput5'
        msg = ['5th input passed to ',...
            'transform_observables_from_raw_to_model_space must be a ',...
            'finite numeric column vector of initial conditions for ',...
            'the deterministic time-varying trends'];
    case 'InconsistentRawObsDims'
        msg = ['The dimensions of the raw observables initial ',...
            'conditions and dataset are not consistent: they must ',...
            'have the same number of rows (representing the number of ',...
            'observables in the model)'];
    case 'InconsistentTimeTrendDims'
        msg = ['The dimensions of the deterministic time-varying ',...
            'trend initial conditions and dataset are not consistent: ',...
            'they must have the same number of rows (representing the ',...
            'number of separate deterministic time-varying trends in ',...
            'the model)'];
    case 'InconsistentRawObsTimeTrendDims'
        msg = ['The dimensions of the raw observables dataset and the ',...
            'deterministic time-varying trends dataset are not ',...
            'consistent: they must have the same number of columns ',...
            '(representing the number of time periods of data)'];
    case 'FunHandleEvalFailure'
        msg = ['On evaluation of the data transformation function ',...
            'handle, MATLAB returned the following error:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% UNDO OVERLAY OF ONE INCOMPLETE DATASET ON TO ANOTHER
function msg = ...
    get_undo_overlay_of_one_incomplete_dataset_on_to_another_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['undo_overlay_of_one_incomplete_dataset_on_to_another ',...
            'was not passed the right number of inputs: it requires 4 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'undo_overlay_of_one_incomplete_dataset_on_to_another ',...
            'representing the model dataset must be a real, two-',...
            'dimensional matrix with no infinite values'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'undo_overlay_of_one_incomplete_dataset_on_to_another ',...
            'must be column cell string array or column vector of ',...
            'index numbers representing the model metadata for the ',...
            'dataset input'];
    case 'BadInput3'
        msg = ['3rd inputs passed to ',...
            'undo_overlay_of_one_incomplete_dataset_on_to_another ',...
            'must be a two-dimensional logical matrix describing ',...
            'which of the components of the combined dataset were ',...
            'taken from the first dataset'];
    case 'BadInput4'
        msg = ['4th inputs passed to ',...
            'undo_overlay_of_one_incomplete_dataset_on_to_another ',...
            'must be a two-dimensional logical matrix describing ',...
            'which of the components of the combined dataset were ',...
            'taken from the second dataset'];
    case 'MetadataDimsInconsistentWithData'
        msg = ['The number of rows (indexing variables) in the ',...
            'dataset was not consistent with the number of rows in ',...
            'the model metadata for the dataset'];
    case 'Logical1DimsInconsistentWithData'
        msg = ['The dimensions of the logical matrix describing ',...
            'which of the components of the combined dataset were ',...
            'taken from the first dataset were not consistent with ',...
            'the dimensions of the combined dataset'];
    case 'Logical2DimsInconsistentWithData'
        msg = ['The dimensions of the logical matrix describing ',...
            'which of the components of the combined dataset were ',...
            'taken from the second dataset were not consistent with ',...
            'the dimensions of the combined dataset'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% UNPACK DATA FROM MAPS DATASET
function msg = get_unpack_data_from_MAPS_dataset_error(errCode,errArgs)     %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['unpack_data_from_MAPS_dataset was not passed the ',...
            'right number of inputs: it requires 2 inputs, but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to unpack_data_from_MAPS_dataset ',...
            'must be a MAPS dataset structure'];
    case 'BadInput2'
        msg = ['2nd input passed to unpack_data_from_MAPS_dataset ',...
            'must be a row vector cell string array of data ',...
            'series identifiers in the dataset'];
    case 'BadField'
        msg = ['The ''',errArgs{1},''' field was not a structure as ',...
            'expected'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% UNPACK DECOMP GROUP STRING
function msg = get_unpack_decomp_group_string_error(errCode,errArgs)        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['unpack_decomp_group_string was not passed the right ',...
            'number of inputs: it requires 1 inputs, but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to unpack_decomp_group_string must ',...
            'be a group definition or grouping instruction string'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% UNPACK MODEL
function msg = get_unpack_model_error(errCode,errArgs)                      %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['unpack_model was not passed the right number of ',...
            'inputs: it requires 2 inputs, but only received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to unpack_model must be a MAPS ',...
            'model structure which must have a ''Constructor'' field'];
    case 'BadInput2'
        msg = ['2nd input passed to unpack_model must be a vector ',...
            'cell string array of model component identifiers'];
    case 'NarginNargoutMismatch'
        msg = ['The number of identifiers passed in (identifying ',...
            'model components to unpack) must equal the number ',...
            'of outputs in the output argument list'];
    case 'UnpackFailure'
        msg = ['MAPS was unable to unpack the following model ',...
            'component(s):'];
    case 'UnpackFailure:ConstructorEvalFailure'
        msg = ['On evaluation of the model constructor field ''',....
            errArgs{1},''' MATLAB returned the following error:'];
    case 'UnpackFailure:NonExistentID'
        msg = ['The identifier ''',errArgs{1},''' could not be found ',...
            'among the list of valid MAPS model component identifiers ',...
            'in the model input'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% UNPACK MODEL METADATA AND LOOKUP INDEX NUMBERS
function msg = get_unpack_model_metadata_and_lookup_index_numbers_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['unpack_model_metadata_and_lookup_index_numbers was ',...
            'not passed the right number of inputs: it requires 3 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'unpack_model_metadata_and_lookup_index_numbers must be ',...
            'a MAPS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'unpack_model_metadata_and_lookup_index_numbers must be ',...
            'a string identifying metadata for a particular variable ',...
            'type in the model'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'unpack_model_metadata_and_lookup_index_numbers must be ',...
            'a column cell string array of metadata whose index ',...
            'numbers to lookup in the model'];
    case 'UnpackMetadataFailure'
        msg = ['It was not possible to lookup the index numbers of ',...
            'the metadata passed in because of the following error in ',...
            'unpacking the model metadata in which to lookup the ',...
            'index numbers:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% UPDATE MODEL METADATA
function msg = get_update_model_metadata_error(errCode,errArgs)                 %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['update_model_metadata was not passed the right number ',...
            'of inputs: it requires 2 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to update_model_metadata must be a ',...
            'MAPS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to update_model_metadata must be a ',...
            'two-column cell array of strings, with metadata field ',...
            'names in the first column, and updated metadata field ',...
            'values in the second.'];
    case 'BadFieldNames'
        msg = ['The following metadata field names provided were not ',...
            'found in the model:'];
    case 'BadFieldNames:Instance'
        msg = errArgs{1};
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% UPDATE PARAMETERS
function msg = get_update_parameters_error(errCode,errArgs)                 %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['update_parameters was not passed the right number of ',...
            'inputs: it requires 3, 4, or 5 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to update_parameters must be a MAPS ',...
            'model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to update_parameters must be a ',...
            'finite real column vector of parameter values with which ',...
            'to update/overwrite existing parameter values'];
    case 'BadInput3'
        msg = ['Optional 3rd input passed to update_parameters must ',...
            'be either a column vector of positive integer index ',...
            'numbers or a column cell string array (or simgle string) ',...
            'of parameter mnemonics identifying the parameters whose ',...
            'values are to be updated/overwritten'];
    case 'BadInput4'
        msg = ['Optional 4th input passed to update_parameters must ',...
            'be a finite real column vector of existing values for ',...
            'all the parameters in the model (in model order)'];  
    case 'BadInput5'
        msg = ['Optional 5th input passed to update_parameters must ',...
            'be a column cell string array of mnemonics for all the ',...
            'parameters in the model with the same dimension as the ',...
            'complete vector of parameter values'];    
    case 'IdentifiersParametersDimMismatch'
        msg = ['The vector of parameter values with which to update/ ',...
            'overwrite existing parameter values (passed in as 2nd ',...
            'input) must have the same dimension as the vector of ',...
            'the vector of index number or mnemonic identifiers for ',...
            'the parameters whose values are to be updated/',...
            'overwriteen (passed in as 3rd input)']; 
    case 'UpdateVectorIsTooLarge'
        msg = ['The vector of values with which to update/overwrite a ',...
            'subset of the existing parameter values (passed in as ',...
            '2nd input) cannot be larger in dimension than the ',...
            'complete vector of existing parameter values'];
    case 'BadMnems'
        msg = ['It was not possible to compute the index numbers of ',...
            'the parameters to be updated using the mnemonic ',...
            'identifiers (passed in as 3rd input) because either: ',...
            'a) one or more of those mnemonics were repeated or do ',...
            'not exist among the complete set of parameter mnemonics ',...
            'in the model; b) if the complete set of model parameter ',...
            'mnemonics were passed in as 5th input, they are not the ',...
            'correct/valid set (ie do not match those in the model ',...
            'structure input). MAPS'' model index lookup function ',...
            'returned the following error(s):'];
    case 'IndexIdentifiersOutOfRange'
        msg = ['At least one of the index numbers identifying the ',...
            'parameter values to update (passed in as 3rd input to ',...
            'this function) is larger than the number of parameters ',...
            'in the model (i.e. is out of bounds)']; 
    case 'IndexIdentifiersNonUnique'
        msg = ['One or more of the index numbers identifying the ',...
            'parameter values to update (passed in as 3rd input to ',...
            'this function) is repeated (non-unique)'];        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% UPDATE PARAMETERS AND RESOLVE LSS MODEL
function msg = get_update_parameters_and_resolve_LSS_model_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['update_parameters_and_resolve_LSS_model was not ',...
            'passed the right number of inputs: it requires 3, 4, or ',...
            '5 inputs but received ',errArgs{1}];
    case 'UnableToResolve'
        msg = ['The model failed to resolve after successful update ',...
            'of the parameters. MAPS'' LSS model solver returned ',...
            'the following error(s):'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end


%% VALIDATE CELL ARRAY INCOMPLETE MODEL DATASET
function msg = get_validate_cell_array_incomplete_model_dataset_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_cell_array_incomplete_model_dataset was not ',...
            'passed the right number of inputs: it requires 3 or 4 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'validate_cell_array_incomplete_model_dataset must be a ',...
            'MAPS model structure'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'validate_cell_array_incomplete_model_dataset must be a ',...
            'string identifying metadata for a particular variable ',...
            'type in the model'];
    case 'BadInput4'
        msg = ['Optional 4th input passed to ',...
            'validate_cell_array_incomplete_model_dataset must be an ',...
            'exception'];
    case 'ValidationFailure'
        msg = ['The dataset passed in failed validation for the ',...
            'following reason(s):'];
    case 'BadDatasetFormat'
        msg = ['Dataset (2nd input passed to ',...
            'validate_cell_array_incomplete_model_dataset) must be a ',...
            'two-column cell array incomplete model dataset'];
    case 'BadColumn1'
        msg = ['The 1st column in the two-column cell array ',...
            'incomplete model dataset must be a cell string array of ',...
            'metadata relating each of the separate time series of ',...
            'data in the second column to a variable from the model'];
    case 'BadColumn2'
        msg = ['The 2nd column in the two-column cell array ',...
            'incomplete model dataset must contain individual row ',...
            'vectors of numeric data for each of the variables in the ',...
            'incomplete set'];
    case 'BadMetadata'
        msg = ['The following problem(s) were encountered in ',...
            'associating the metadata for the data with variables in ',...
            'the model'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE CELL ARRAY MODEL DATASET OF LOGICALS
function msg = get_validate_cell_array_model_dataset_of_logicals_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_cell_array_model_dataset_of_logicals was not ',...
            'passed the right number of inputs: it requires 3 or 4 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'validate_cell_array_model_dataset_of_logicals must be a ',...
            'MAPS model structure'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'validate_cell_array_model_dataset_of_logicals must be a ',...
            'string identifying metadata for a particular variable ',...
            'type in the model'];
    case 'BadInput4'
        msg = ['Optional 4th input passed to ',...
            'validate_cell_array_model_dataset_of_logicals must be a ',...
            'MATLAB exception object'];
    case 'ValidationFailure'
        msg = ['The dataset passed in failed validation for the ',...
            'following reason(s):'];
    case 'BadDatasetFormat'
        msg = ['Dataset (2nd input passed to ',...
            'validate_cell_array_incomplete_model_dataset) must be a ',...
            'two-column cell array incomplete model dataset'];
    case 'BadColumn1'
        msg = ['The 1st column in the two-column cell array ',...
            'incomplete model dataset must be a cell string array of ',...
            'metadata relating each of the separate time series of ',...
            'data in the second column to a variable from the model'];
    case 'BadColumn2'
        msg = ['The 2nd column in the two-column cell array ',...
            'incomplete model dataset must contain individual row ',...
            'vectors of numeric or logical data for each of the ',...
            'variables in the incomplete set'];
    case 'BadMetadata'
        msg = ['The following problem(s) were encountered in ',...
            'associating the metadata for the data with variables in ',...
            'the model'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE COMPLETE MODEL DATASET
function msg = get_validate_complete_model_dataset_error(errCode,errArgs)   %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_complete_model_dataset was not passed the ',...
            'right number of inputs: it requires 3 or 4 inputs, but ',...
            'only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to validate_complete_model_dataset ',...
            'must be a MAPS model structure'];
    case 'BadInput3'
        msg = ['3rd input passed to validate_complete_model_dataset ',...
            'must be a string representing the model dataset metadata ',...
            'name (eg ''xMnems'')'];
    case 'BadInput4'
        msg = ['Optional 4th input passed to ',...
            'validate_complete_model_dataset must be an exception'];
    case 'ValidationFailure'
        msg = ['The dataset passed in failed validation for the ',...
            'following reason(s):'];
    case 'BadDatasetFormat'
        msg = ['Dataset (2nd input passed to ',...
            'validate_complete_model_dataset) must be a numeric two-',...
            'dimensional matrix dataset'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE DATA IN MAPS DATASET
function msg = get_validate_data_in_MAPS_dataset_error(errCode,errArgs)     %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_data_in_MAPS_dataset was not passed the ',...
            'right number of inputs: it requires 5 inputs, but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to validate_data_in_MAPS_dataset ',...
            'must be a MAPS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to validate_data_in_MAPS_dataset ',...
            'must be a MAPS dataset structure'];
    case 'BadInput3'
        msg = ['3rd input passed to validate_data_in_MAPS_dataset ',...
            'must be a two-dimensional cell string array of ',...
            'configuration information for the dataset with at least ',...
            '8 columns'];
    case 'BadInput4'
        msg = ['4th input passed to validate_data_in_MAPS_dataset ',...
            'must be a positive numeric integer representing the ',...
            'number of expected periods in any past data in the dataset'];
    case 'BadInput5'
        msg = ['5th input passed to validate_data_in_MAPS_dataset ',...
            'must be a positive numeric integer representing the ',...
            'number of expected periods in any forecast data in the ',...
            'dataset'];
    case 'BadData'
        msg = 'The following data in the dataset failed validation:';
    case 'UnknownStorageType'
        msg = ['It was not possible to validate the data because ',...
            'of the following unknown and unhandled storage type ',...
            'associated with that data in the input MAPS dataset ',...
            'configuration cell array: ''',errArgs{1},''''];
    case 'BadDataset'
        nonEmptySeriesIds = errArgs(~cellfun(@isempty,errArgs));
        seriesIdsString = create_comma_separated_list(nonEmptySeriesIds);
        seriesStructureFields = strrep(seriesIdsString,', ','.');
        msg = ['''',seriesStructureFields,''' for the following ',...
            'reason(s):'];
    case 'UnknownStorageSubType'
        msg = ['It was not possible to validate the data (given the ',...
            'storage type associated with it) because of the ',...
            'following unknown and unhandled storage sub-type ',...
            'associated with that data in the input MAPS dataset ',...
            'configuration cell array: ''',errArgs{1},''''];
    case 'BadDataDims'
        msg = ['The number of periods in the dataset is not equal to ',...
            errArgs{1},' as expected'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE DECOMP GROUP DEFINITION STRING
function msg = get_validate_decomp_group_definition_string_error(...
    errCode,errArgs)                                                    %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_decomp_group_definition_string was not ',...
            'passed the right number of inputs: it requires 2, 3 or ',...
            '4 inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'validate_decomp_group_definition_string must be a MAPS ',...
            'linear state space model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'validate_decomp_group_definition_string must be a MAPS ',...
            'decomposition group definition string'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'validate_decomp_group_definition_string must be a ',...
            'structure of parsed decomposition add-on information'];
    case 'BadInput4'
        msg = ['4th input passed to ',...
            'validate_decomp_group_definition_string must be an ',...
            'exception to add validation failure causes to'];
    case 'BadDecompGroupDef'
        msg = ['The decomposition group definition string must be of ',...
            'the following form: ''[component1;component2;etc]'' ',...
            'where component1 etc are the shocks and model variables ',...
            'to group together in the decomposition appended with the ',...
            'correct time subscripts (''{t}'' for shocks & ''{t-1}'', ',...
            '''{t}'' or ''{t+1}'' for model variables ) or the shock-',...
            'based decomposition component convention of ''sum(shock1)',...
            ''' etc. MAPS found the following syntax errors:'];
    case 'BadGroupKeyDelims'
        msg = ['The definition string must begin with ''['' and end ',...
            'with '']'''];
    case 'MissingGroupContent'
        msg = ['Group components in the definition string must be ',...
            'separated by one and only one semi-colon'];
    case 'RepeatedGroupComponents'
        msg = ['All components of the group must be unique. The ',...
            'following components appear at least twice:'];
    case 'RepeatedGroupComponents:Instance'
        msg = errArgs{1};
    case 'InvalidGroupComponents'
        msg = ['All components must exist in the model (or add-on ',...
            'file) and must have the correct time subscripts. The ',...
            'following components could not be identified:'];
    case 'InvalidGroupComponents:Instance'
        msg = ['''',errArgs{1},''''];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE LSS MODEL EQUATION MATRICES
function msg = get_validate_LSS_model_equation_matrices_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_LSS_model_equation was not passed the right ',...
            'number of inputs: it requires 4 inputs, but received ',...
            errArgs{1}];
    case 'BadHB'
        msg = ['The backward loadings from the linear state space ',...
            'model''s model equations (''HB'' - the 1st input passed ',...
            'to the validation function) must be a finite, real, ',...
            'square matrix'];
    case 'BadHC'
        msg = ['The contemporaneous loadings from the linear state ',...
            'space model''s model equations (''HC'' - the 2nd input ',...
            'passed to the validation function) must be a finite, ',...
            'real, square matrix'];
    case 'BadHF'
        msg = ['The forward loadings from the linear state space ',...
            'model''s model equations (''HF'' - the 3rd input passed ',...
            'to the validation function) must be a finite, real, ',...
            'square matrix'];
    case 'BadPSI'
        msg = ['The loadings on shocks from the linear state space ',...
            'model''s model equations (''PSI'' - the 4th input passed ',...
            'to the validation function) must be a finite, real, ',...
            'two-dimensional, numeric matrix'];
    case 'HBincompatibleHC'
        msg = ['The backward loadings  (''HB'' - the 1st input passed ',...
            'to the validation function) and the contemporaneous ',...
            'loadings (''HC'' - the 2nd input passed to the ',...
            'validation function) from the linear state space ',...
            'model''s model equations are incompatible with each ',...
            'other because they do not have the same number of rows'];
    case 'HFincompatibleHC'
        msg = ['The forward loadings  (''HF'' - the 3rd input passed ',...
            'to the validation function) and the contemporaneous ',...
            'loadings (''HC'' - the 2nd input passed to the ',...
            'validation function) from the linear state space ',...
            'model''s model equations are incompatible with each ',...
            'other because they do not have the same number of rows'];
    case 'PSIincompatibleHC'
        msg = ['The shock loadings  (''PSI'' - the 4th input passed ',...
            'to the validation function) and the contemporaneous ',...
            'loadings (''HC'' - the 2nd input passed to the ',...
            'validation function) from the linear state space ',...
            'model''s model equations are incompatible with each ',...
            'other because they do not have the same number of rows'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE LSS MODEL
function msg = get_validate_LSS_model_error(errCode,errArgs)                %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_LSS_model was not passed the right number of ',...
            'inputs: it requires 2 inputs, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to validate_LSS_model must be a MAPS ',...
            'linear state space model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to validate_LSS_model must be a ',...
            'string representing the name of a .maps file to create ',...
            'as part of the validation'];
    case 'BadModelClass'
        msg = ['MAPS model input to validate_LSS_model must be of the ',...
            'linear state space model class'];
    case 'ModelFileCreationFailure'
        msg = ['MAPS was unable to validate the model input because ',...
            'its model file creation function (used as part of the ',...
            'validation) failed with the following error'];
    case 'ParseFailure'
        msg = ['The input linear state space model failed validation ',...
            'because it could not be (re-)parsed into MAPS. MAPS'' ',...
            'linear state space model parser returned the following ',...
            'error'];
    case 'ModelNumericsDifferences'
        msg = ['The input linear state space model failed validation ',...
            'because its numerical content could not be reproduced ',...
            'within a tolerance of ',errArgs{1}];
    case 'ModelNumericsProblem'
        msg = ['The input linear state space model failed validation ',...
            'because it could not be re-solved.  MAPS'' linear state ',...
            'space model numeric creater returned the following error:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end


%% VALIDATE LSS MODEL SOLUTION MATRICES
function msg = get_validate_LSS_model_solution_matrices_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_LSS_model_solution_matrices was not passed ',...
            'the right number of inputs: it requires 1, 2 or 3 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadB'
        msg = ['The loadings on the lagged model variables from the ',...
            'linear state space model solution (''B'' - the 1st ',...
            'input passed to the validation function) must be a ',...
            'finite, real, two-dimensional, square, numeric matrix'];
    case 'BadPHI'
        msg = ['The loadings on the shocks from the linear state ',...
            'space model solution (''PHI'' - the 2nd input passed to ',...
            'the validation function) must be a finite, real, two-',...
            'dimensional, square, numeric matrix'];
    case 'BadF'
        msg = ['The (additional) loadings on the anticipated shocks ',...
            'from the linear state space model solution (''F'' - the ',...
            '3rd input passed to the validation function) must be a ',...
            'finite, real, two-dimensional, square, numeric matrix'];
    case 'BincompatiblePHI'
        msg = ['The loadings on the lagged model variables from the ',...
            'linear state space model solution (''B'' - the 1st ',...
            'input passed to the validation function) and the ',...
            'loadings on the shocks from the linear state space model ',...
            'solution (''PHI'' - the 2nd input passed to the ',...
            'validation function) are incompatible with each other ',...
            'because they do not have the same number of rows'];
    case 'BincompatibleF'
        msg = ['The loadings on the lagged model variables from the ',...
            'linear state space model solution (''B'' - the 1st ',...
            'input passed to the validation function) and the ',...
            '(additional) loadings on the anticipated shocks from the ',...
            'linear state space model solution (''F'' - the 3rd ',...
            'input passed to the validation function) are ',...
            'incompatible with each other because they do not have ',...
            'the same number of rows'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE MEASUREMENT EQUATIONS MATRICES
function msg = get_validate_measurement_equation_matrices_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_measurement_equation_matrices was not passed ',...
            'the right number of inputs: it requires 2 or 3 inputs, ',...
            'but only received ',errArgs{1}];
    case 'BadD'
        msg = ['The constants from the linear state space model ',...
            'measurement equations (''D'' - the 1st input passed to ',...
            'the validation function) must be a finite, real, two-',...
            'dimensional, numeric column vector'];
    case 'BadG'
        msg = ['The loadings on model variables from the linear state ',...
            'space model measurement equations (''G'' - the 2nd input ',...
            'passed to the validation function) must be a finite, ',...
            'real, two-dimensional, numeric matrix'];
    case 'BadV'
        msg = ['The loadings on measurement errors from the linear ',...
            'state space model measurement equations (''V'' - the 3rd ',...
            'input passed to the validation function) must be a ',...
            'finite, real, two-dimensional, numeric matrix'];
    case 'DincompatibleG'
        msg = ['The constants from the linear state space model ',...
            'measurement equations (''D'' - the 1st input passed to ',...
            'the validation function) and the loadings on model ',...
            'variables from the linear state space model measurement ',...
            'equations (''G'' - the 2nd input passed to the ',...
            'validation function) are incompatible with each other ',...
            'because they do not have the same number of rows'];
    case 'DincompatibleV'
        msg = ['The constants from the linear state space model ',...
            'measurement equations (''D'' - the 1st input passed to ',...
            'the validation function) and the loadings on measurement ',...
            'errors from the linear state space model measurement ',...
            'equations (''V'' - the 3rd input passed to the ',...
            'validation function) are incompatible with each other ',...
            'because they do not have the same number of rows'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE MODEL
function msg = get_validate_model_error(errCode,errArgs)                    %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_model was not passed the right number of ',...
            'inputs: it requires 2 inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to validate_model must be a MAPS ',...
            'model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to validate_model must be a ',...
            'string representing the name of a .maps file to create ',...
            'as part of the validation'];
    case 'ModelClassDeterminationFailure'
        msg = ['MAPS was unable to validate the model passed in ',...
            'because it could not determine whether the input ',...
            'model was linear state space or non-linear backward-',...
            'looking. MAPS'' model unpacker returned the following ',...
            'error:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end


%% VALIDATE STRINGS BELONG TO REFERENCE SET
function msg = get_validate_strings_belong_to_reference_set_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_strings_belong_to_reference_set was not ',...
            'passed the right number of inputs: it requires 2 or ',...
            '3 inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'validate_strings_belong_to_reference_set must be a ',...
            'string or vector cell array of strings to validate ',...
            'against a reference set'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'validate_strings_belong_to_reference_set must be a ',...
            'vector cell array of reference strings to validate ',...
            'membership of the input strings'];   
    case 'BadInput3'
        msg = ['Optional 3rd input passed to ',...
            'validate_strings_belong_to_reference_set must be a ',...
            'MAPS exception message identifier string to construct a ',...
            'custom error message in the event that one or more of ',...
            'the input strings do not belong to the reference set'];
    case 'InvalidStrings'
        msg = ['The following strings do not belong to the reference ',...
            'set:'];
    case 'InvalidStrings:Instance'
        msg = errArgs{1};
    otherwise
        throw_missing_error_code_error(errCode);
end
end        


%% WRITE TO MAPS TEXT FILE
function msg = get_write_to_MAPS_text_file_error(errCode,errArgs)           %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['write_to_MAPS_text_file was not passed the right ',...
            'number of inputs: it requires 2 input, but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by write_to_MAPS_text_file must ',...
            'be a column cell string array of data to write out to a ',...
            '.maps text file'];
    case 'BadInput2'
        msg = ['2nd input received by write_to_MAPS_text_file must be ',...
            'a .maps file name string'];
    case 'InvalidFileName'
        msg = ['MAPS could not write out the .maps file because ''',...
            errArgs{1},''' is not a valid .maps file name for the ',...
            'following reason:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% WRITE TO TEXT FILE
function msg = get_write_to_text_file_error(errCode,errArgs)                %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['write_to_text_file was not passed the right number of ',...
            'inputs: it requires 2 or 3 inputs, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by write_to_text_file must be a ',...
            'file name string'];        
    case 'BadInput2'
        msg = ['2nd input received by write_to_text_file must be a ',...
            'string or column cell string array of data to write out ',...
            'to the specified text file'];
    case 'BadInput3'
        msg = ['Optional 3rd input received by write_to_text_file ',...
            'must be a logical scalar dictating whether any existing ',...
            'content in the file should be overwritten (true) or ',...
            'added to (false)'];
    case 'BadFileNameExtension'
        msg = ['The file name passed in must have a ''.maps'' or ',...
            '''.txt'' extension'];
    case 'FileOpenFailure'
        msg = ['It was not possible to open the file for some ',...
            'unexpected reason. On attempting to open the file, ',...
            '(using fopen) MATLAB returned the following error message:'];
    case 'FileWriteFailure'
        msg = ['For some unknown reason, it was not possible to write ',...
            'the line containing ''',errArgs{1},''' out to a the text ',...
            'file. MATLAB returned the following error:'];
    case 'FileCloseFailure'
        msg = ['For some unknown reason, it was not possible to close ',...
            'the file after writing out to it'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end


%% HELPER TO GENERATE ERROR IF A MESSAGE COULD NOT BE GENERATED
function throw_missing_error_code_error(errCode)
error(['MAPS:',mfilename,':UnknownErrorCode'],['MAPS was unable to ',...
    'generate the error coded as ''',errCode,''' because there is no ',...
    'message coded for that error (either it is missing altogether or ',...
    'there is a mismatch in the spelling of the error code in this ',...
    'function and the calling function)'])
end
